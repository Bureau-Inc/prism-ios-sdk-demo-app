// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name prism_ios_native_sdk
import Combine
import CoreGraphics
import Dispatch
import Foundation
import MobileCoreServices
import ObjectiveC
import QuartzCore
import Swift
import SystemConfiguration
import UIKit
import UniformTypeIdentifiers
import WebKit
import _Concurrency
@_exported import prism_ios_native_sdk
public protocol RedirectHandler {
  func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
public struct Redirector {
  public enum Behavior {
    case follow
    case doNotFollow
    case modify((Foundation.URLSessionTask, Foundation.URLRequest, Foundation.HTTPURLResponse) -> Foundation.URLRequest?)
  }
  public static let follow: prism_ios_native_sdk.Redirector
  public static let doNotFollow: prism_ios_native_sdk.Redirector
  public let behavior: prism_ios_native_sdk.Redirector.Behavior
  public init(behavior: prism_ios_native_sdk.Redirector.Behavior)
}
extension prism_ios_native_sdk.Redirector : prism_ios_native_sdk.RedirectHandler {
  public func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
extension prism_ios_native_sdk.RedirectHandler where Self == prism_ios_native_sdk.Redirector {
  public static var follow: prism_ios_native_sdk.Redirector {
    get
  }
  public static var doNotFollow: prism_ios_native_sdk.Redirector {
    get
  }
  public static func modify(using closure: @escaping (Foundation.URLSessionTask, Foundation.URLRequest, Foundation.HTTPURLResponse) -> Foundation.URLRequest?) -> prism_ios_native_sdk.Redirector
}
public protocol EventMonitor {
  var queue: Dispatch.DispatchQueue { get }
  func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  func request(_ request: prism_ios_native_sdk.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: prism_ios_native_sdk.Request, didFailToCreateURLRequestWithError error: prism_ios_native_sdk.AFError)
  func request(_ request: prism_ios_native_sdk.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  func request(_ request: prism_ios_native_sdk.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: prism_ios_native_sdk.AFError)
  func request(_ request: prism_ios_native_sdk.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: prism_ios_native_sdk.Request, didCreateTask task: Foundation.URLSessionTask)
  func request(_ request: prism_ios_native_sdk.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  func request(_ request: prism_ios_native_sdk.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: prism_ios_native_sdk.AFError)
  func request(_ request: prism_ios_native_sdk.Request, didCompleteTask task: Foundation.URLSessionTask, with error: prism_ios_native_sdk.AFError?)
  func requestIsRetrying(_ request: prism_ios_native_sdk.Request)
  func requestDidFinish(_ request: prism_ios_native_sdk.Request)
  func requestDidResume(_ request: prism_ios_native_sdk.Request)
  func request(_ request: prism_ios_native_sdk.Request, didResumeTask task: Foundation.URLSessionTask)
  func requestDidSuspend(_ request: prism_ios_native_sdk.Request)
  func request(_ request: prism_ios_native_sdk.Request, didSuspendTask task: Foundation.URLSessionTask)
  func requestDidCancel(_ request: prism_ios_native_sdk.Request)
  func request(_ request: prism_ios_native_sdk.Request, didCancelTask task: Foundation.URLSessionTask)
  func request(_ request: prism_ios_native_sdk.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: prism_ios_native_sdk.Request.ValidationResult)
  func request(_ request: prism_ios_native_sdk.DataRequest, didParseResponse response: prism_ios_native_sdk.DataResponse<Foundation.Data?, prism_ios_native_sdk.AFError>)
  func request<Value>(_ request: prism_ios_native_sdk.DataRequest, didParseResponse response: prism_ios_native_sdk.DataResponse<Value, prism_ios_native_sdk.AFError>)
  func request(_ request: prism_ios_native_sdk.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: prism_ios_native_sdk.Request.ValidationResult)
  func request<Value>(_ request: prism_ios_native_sdk.DataStreamRequest, didParseStream result: Swift.Result<Value, prism_ios_native_sdk.AFError>)
  func request(_ request: prism_ios_native_sdk.UploadRequest, didCreateUploadable uploadable: prism_ios_native_sdk.UploadRequest.Uploadable)
  func request(_ request: prism_ios_native_sdk.UploadRequest, didFailToCreateUploadableWithError error: prism_ios_native_sdk.AFError)
  func request(_ request: prism_ios_native_sdk.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  func request(_ request: prism_ios_native_sdk.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, prism_ios_native_sdk.AFError>)
  func request(_ request: prism_ios_native_sdk.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  func request(_ request: prism_ios_native_sdk.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: prism_ios_native_sdk.Request.ValidationResult)
  func request(_ request: prism_ios_native_sdk.DownloadRequest, didParseResponse response: prism_ios_native_sdk.DownloadResponse<Foundation.URL?, prism_ios_native_sdk.AFError>)
  func request<Value>(_ request: prism_ios_native_sdk.DownloadRequest, didParseResponse response: prism_ios_native_sdk.DownloadResponse<Value, prism_ios_native_sdk.AFError>)
}
extension prism_ios_native_sdk.EventMonitor {
  public var queue: Dispatch.DispatchQueue {
    get
  }
  public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  public func request(_ request: prism_ios_native_sdk.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: prism_ios_native_sdk.Request, didFailToCreateURLRequestWithError error: prism_ios_native_sdk.AFError)
  public func request(_ request: prism_ios_native_sdk.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  public func request(_ request: prism_ios_native_sdk.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: prism_ios_native_sdk.AFError)
  public func request(_ request: prism_ios_native_sdk.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: prism_ios_native_sdk.Request, didCreateTask task: Foundation.URLSessionTask)
  public func request(_ request: prism_ios_native_sdk.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  public func request(_ request: prism_ios_native_sdk.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: prism_ios_native_sdk.AFError)
  public func request(_ request: prism_ios_native_sdk.Request, didCompleteTask task: Foundation.URLSessionTask, with error: prism_ios_native_sdk.AFError?)
  public func requestIsRetrying(_ request: prism_ios_native_sdk.Request)
  public func requestDidFinish(_ request: prism_ios_native_sdk.Request)
  public func requestDidResume(_ request: prism_ios_native_sdk.Request)
  public func request(_ request: prism_ios_native_sdk.Request, didResumeTask task: Foundation.URLSessionTask)
  public func requestDidSuspend(_ request: prism_ios_native_sdk.Request)
  public func request(_ request: prism_ios_native_sdk.Request, didSuspendTask task: Foundation.URLSessionTask)
  public func requestDidCancel(_ request: prism_ios_native_sdk.Request)
  public func request(_ request: prism_ios_native_sdk.Request, didCancelTask task: Foundation.URLSessionTask)
  public func request(_ request: prism_ios_native_sdk.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: prism_ios_native_sdk.Request.ValidationResult)
  public func request(_ request: prism_ios_native_sdk.DataRequest, didParseResponse response: prism_ios_native_sdk.DataResponse<Foundation.Data?, prism_ios_native_sdk.AFError>)
  public func request<Value>(_ request: prism_ios_native_sdk.DataRequest, didParseResponse response: prism_ios_native_sdk.DataResponse<Value, prism_ios_native_sdk.AFError>)
  public func request(_ request: prism_ios_native_sdk.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: prism_ios_native_sdk.Request.ValidationResult)
  public func request<Value>(_ request: prism_ios_native_sdk.DataStreamRequest, didParseStream result: Swift.Result<Value, prism_ios_native_sdk.AFError>)
  public func request(_ request: prism_ios_native_sdk.UploadRequest, didCreateUploadable uploadable: prism_ios_native_sdk.UploadRequest.Uploadable)
  public func request(_ request: prism_ios_native_sdk.UploadRequest, didFailToCreateUploadableWithError error: prism_ios_native_sdk.AFError)
  public func request(_ request: prism_ios_native_sdk.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  public func request(_ request: prism_ios_native_sdk.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, prism_ios_native_sdk.AFError>)
  public func request(_ request: prism_ios_native_sdk.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  public func request(_ request: prism_ios_native_sdk.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: prism_ios_native_sdk.Request.ValidationResult)
  public func request(_ request: prism_ios_native_sdk.DownloadRequest, didParseResponse response: prism_ios_native_sdk.DownloadResponse<Foundation.URL?, prism_ios_native_sdk.AFError>)
  public func request<Value>(_ request: prism_ios_native_sdk.DownloadRequest, didParseResponse response: prism_ios_native_sdk.DownloadResponse<Value, prism_ios_native_sdk.AFError>)
}
@_hasMissingDesignatedInitializers final public class CompositeEventMonitor : prism_ios_native_sdk.EventMonitor {
  final public let queue: Dispatch.DispatchQueue
  final public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  final public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  final public func request(_ request: prism_ios_native_sdk.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: prism_ios_native_sdk.Request, didFailToCreateURLRequestWithError error: prism_ios_native_sdk.AFError)
  final public func request(_ request: prism_ios_native_sdk.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  final public func request(_ request: prism_ios_native_sdk.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: prism_ios_native_sdk.AFError)
  final public func request(_ request: prism_ios_native_sdk.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: prism_ios_native_sdk.Request, didCreateTask task: Foundation.URLSessionTask)
  final public func request(_ request: prism_ios_native_sdk.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  final public func request(_ request: prism_ios_native_sdk.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: prism_ios_native_sdk.AFError)
  final public func request(_ request: prism_ios_native_sdk.Request, didCompleteTask task: Foundation.URLSessionTask, with error: prism_ios_native_sdk.AFError?)
  final public func requestIsRetrying(_ request: prism_ios_native_sdk.Request)
  final public func requestDidFinish(_ request: prism_ios_native_sdk.Request)
  final public func requestDidResume(_ request: prism_ios_native_sdk.Request)
  final public func request(_ request: prism_ios_native_sdk.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func requestDidSuspend(_ request: prism_ios_native_sdk.Request)
  final public func request(_ request: prism_ios_native_sdk.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func requestDidCancel(_ request: prism_ios_native_sdk.Request)
  final public func request(_ request: prism_ios_native_sdk.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: prism_ios_native_sdk.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: prism_ios_native_sdk.Request.ValidationResult)
  final public func request(_ request: prism_ios_native_sdk.DataRequest, didParseResponse response: prism_ios_native_sdk.DataResponse<Foundation.Data?, prism_ios_native_sdk.AFError>)
  final public func request<Value>(_ request: prism_ios_native_sdk.DataRequest, didParseResponse response: prism_ios_native_sdk.DataResponse<Value, prism_ios_native_sdk.AFError>)
  final public func request(_ request: prism_ios_native_sdk.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: prism_ios_native_sdk.Request.ValidationResult)
  final public func request<Value>(_ request: prism_ios_native_sdk.DataStreamRequest, didParseStream result: Swift.Result<Value, prism_ios_native_sdk.AFError>)
  final public func request(_ request: prism_ios_native_sdk.UploadRequest, didCreateUploadable uploadable: prism_ios_native_sdk.UploadRequest.Uploadable)
  final public func request(_ request: prism_ios_native_sdk.UploadRequest, didFailToCreateUploadableWithError error: prism_ios_native_sdk.AFError)
  final public func request(_ request: prism_ios_native_sdk.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  final public func request(_ request: prism_ios_native_sdk.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, prism_ios_native_sdk.AFError>)
  final public func request(_ request: prism_ios_native_sdk.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  final public func request(_ request: prism_ios_native_sdk.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: prism_ios_native_sdk.Request.ValidationResult)
  final public func request(_ request: prism_ios_native_sdk.DownloadRequest, didParseResponse response: prism_ios_native_sdk.DownloadResponse<Foundation.URL?, prism_ios_native_sdk.AFError>)
  final public func request<Value>(_ request: prism_ios_native_sdk.DownloadRequest, didParseResponse response: prism_ios_native_sdk.DownloadResponse<Value, prism_ios_native_sdk.AFError>)
  @objc deinit
}
open class ClosureEventMonitor : prism_ios_native_sdk.EventMonitor {
  open var sessionDidBecomeInvalidWithError: ((Foundation.URLSession, Swift.Error?) -> Swift.Void)?
  open var taskDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> Swift.Void)?
  open var taskDidSendBodyData: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var taskNeedNewBodyStream: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var taskWillPerformHTTPRedirection: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest) -> Swift.Void)?
  open var taskDidFinishCollectingMetrics: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var taskDidComplete: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Error?) -> Swift.Void)?
  open var taskIsWaitingForConnectivity: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var dataTaskDidReceiveData: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.Data) -> Swift.Void)?
  open var dataTaskWillCacheResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Swift.Void)?
  open var downloadTaskDidFinishDownloadingToURL: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Foundation.URL) -> Swift.Void)?
  open var downloadTaskDidWriteData: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var downloadTaskDidResumeAtOffset: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var requestDidCreateInitialURLRequest: ((prism_ios_native_sdk.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToCreateURLRequestWithError: ((prism_ios_native_sdk.Request, prism_ios_native_sdk.AFError) -> Swift.Void)?
  open var requestDidAdaptInitialRequestToAdaptedRequest: ((prism_ios_native_sdk.Request, Foundation.URLRequest, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToAdaptURLRequestWithError: ((prism_ios_native_sdk.Request, Foundation.URLRequest, prism_ios_native_sdk.AFError) -> Swift.Void)?
  open var requestDidCreateURLRequest: ((prism_ios_native_sdk.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidCreateTask: ((prism_ios_native_sdk.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidGatherMetrics: ((prism_ios_native_sdk.Request, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var requestDidFailTaskEarlyWithError: ((prism_ios_native_sdk.Request, Foundation.URLSessionTask, prism_ios_native_sdk.AFError) -> Swift.Void)?
  open var requestDidCompleteTaskWithError: ((prism_ios_native_sdk.Request, Foundation.URLSessionTask, prism_ios_native_sdk.AFError?) -> Swift.Void)?
  open var requestIsRetrying: ((prism_ios_native_sdk.Request) -> Swift.Void)?
  open var requestDidFinish: ((prism_ios_native_sdk.Request) -> Swift.Void)?
  open var requestDidResume: ((prism_ios_native_sdk.Request) -> Swift.Void)?
  open var requestDidResumeTask: ((prism_ios_native_sdk.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidSuspend: ((prism_ios_native_sdk.Request) -> Swift.Void)?
  open var requestDidSuspendTask: ((prism_ios_native_sdk.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidCancel: ((prism_ios_native_sdk.Request) -> Swift.Void)?
  open var requestDidCancelTask: ((prism_ios_native_sdk.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidValidateRequestResponseDataWithResult: ((prism_ios_native_sdk.DataRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?, prism_ios_native_sdk.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseResponse: ((prism_ios_native_sdk.DataRequest, prism_ios_native_sdk.DataResponse<Foundation.Data?, prism_ios_native_sdk.AFError>) -> Swift.Void)?
  open var requestDidValidateRequestResponseWithResult: ((prism_ios_native_sdk.DataStreamRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, prism_ios_native_sdk.Request.ValidationResult) -> Swift.Void)?
  open var requestDidCreateUploadable: ((prism_ios_native_sdk.UploadRequest, prism_ios_native_sdk.UploadRequest.Uploadable) -> Swift.Void)?
  open var requestDidFailToCreateUploadableWithError: ((prism_ios_native_sdk.UploadRequest, prism_ios_native_sdk.AFError) -> Swift.Void)?
  open var requestDidProvideInputStream: ((prism_ios_native_sdk.UploadRequest, Foundation.InputStream) -> Swift.Void)?
  open var requestDidFinishDownloadingUsingTaskWithResult: ((prism_ios_native_sdk.DownloadRequest, Foundation.URLSessionTask, Swift.Result<Foundation.URL, prism_ios_native_sdk.AFError>) -> Swift.Void)?
  open var requestDidCreateDestinationURL: ((prism_ios_native_sdk.DownloadRequest, Foundation.URL) -> Swift.Void)?
  open var requestDidValidateRequestResponseFileURLWithResult: ((prism_ios_native_sdk.DownloadRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.URL?, prism_ios_native_sdk.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseDownloadResponse: ((prism_ios_native_sdk.DownloadRequest, prism_ios_native_sdk.DownloadResponse<Foundation.URL?, prism_ios_native_sdk.AFError>) -> Swift.Void)?
  final public let queue: Dispatch.DispatchQueue
  public init(queue: Dispatch.DispatchQueue = .main)
  open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  open func request(_ request: prism_ios_native_sdk.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: prism_ios_native_sdk.Request, didFailToCreateURLRequestWithError error: prism_ios_native_sdk.AFError)
  open func request(_ request: prism_ios_native_sdk.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  open func request(_ request: prism_ios_native_sdk.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: prism_ios_native_sdk.AFError)
  open func request(_ request: prism_ios_native_sdk.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: prism_ios_native_sdk.Request, didCreateTask task: Foundation.URLSessionTask)
  open func request(_ request: prism_ios_native_sdk.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  open func request(_ request: prism_ios_native_sdk.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: prism_ios_native_sdk.AFError)
  open func request(_ request: prism_ios_native_sdk.Request, didCompleteTask task: Foundation.URLSessionTask, with error: prism_ios_native_sdk.AFError?)
  open func requestIsRetrying(_ request: prism_ios_native_sdk.Request)
  open func requestDidFinish(_ request: prism_ios_native_sdk.Request)
  open func requestDidResume(_ request: prism_ios_native_sdk.Request)
  public func request(_ request: prism_ios_native_sdk.Request, didResumeTask task: Foundation.URLSessionTask)
  open func requestDidSuspend(_ request: prism_ios_native_sdk.Request)
  public func request(_ request: prism_ios_native_sdk.Request, didSuspendTask task: Foundation.URLSessionTask)
  open func requestDidCancel(_ request: prism_ios_native_sdk.Request)
  public func request(_ request: prism_ios_native_sdk.Request, didCancelTask task: Foundation.URLSessionTask)
  open func request(_ request: prism_ios_native_sdk.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: prism_ios_native_sdk.Request.ValidationResult)
  open func request(_ request: prism_ios_native_sdk.DataRequest, didParseResponse response: prism_ios_native_sdk.DataResponse<Foundation.Data?, prism_ios_native_sdk.AFError>)
  public func request(_ request: prism_ios_native_sdk.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: prism_ios_native_sdk.Request.ValidationResult)
  open func request(_ request: prism_ios_native_sdk.UploadRequest, didCreateUploadable uploadable: prism_ios_native_sdk.UploadRequest.Uploadable)
  open func request(_ request: prism_ios_native_sdk.UploadRequest, didFailToCreateUploadableWithError error: prism_ios_native_sdk.AFError)
  open func request(_ request: prism_ios_native_sdk.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  open func request(_ request: prism_ios_native_sdk.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, prism_ios_native_sdk.AFError>)
  open func request(_ request: prism_ios_native_sdk.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  open func request(_ request: prism_ios_native_sdk.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: prism_ios_native_sdk.Request.ValidationResult)
  open func request(_ request: prism_ios_native_sdk.DownloadRequest, didParseResponse response: prism_ios_native_sdk.DownloadResponse<Foundation.URL?, prism_ios_native_sdk.AFError>)
  @objc deinit
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = prism_ios_native_sdk.DataResponse<Value, prism_ios_native_sdk.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: prism_ios_native_sdk.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : prism_ios_native_sdk.ResponseSerializer
  public init<Serializer>(_ request: prism_ios_native_sdk.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : prism_ios_native_sdk.DataResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, prism_ios_native_sdk.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, prism_ios_native_sdk.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == prism_ios_native_sdk.DataResponsePublisher<Value>.Failure, S.Input == prism_ios_native_sdk.DataResponsePublisher<Value>.Output
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension prism_ios_native_sdk.DataResponsePublisher where Value == Foundation.Data? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: prism_ios_native_sdk.DataRequest, queue: Dispatch.DispatchQueue)
}
extension prism_ios_native_sdk.DataRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> prism_ios_native_sdk.DataResponsePublisher<T> where Serializer : prism_ios_native_sdk.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: prism_ios_native_sdk.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> prism_ios_native_sdk.DataResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: prism_ios_native_sdk.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> prism_ios_native_sdk.DataResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  @available(*, deprecated, message: "Renamed publishDecodable(type:queue:preprocessor:decoder:emptyResponseCodes:emptyRequestMethods).")
  @_disfavoredOverload public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: prism_ios_native_sdk.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: prism_ios_native_sdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> prism_ios_native_sdk.DataResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: prism_ios_native_sdk.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: prism_ios_native_sdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> prism_ios_native_sdk.DataResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(queue: Dispatch.DispatchQueue = .main) -> prism_ios_native_sdk.DataResponsePublisher<Foundation.Data?>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataStreamPublisher<Value> : Combine.Publisher {
  public typealias Output = prism_ios_native_sdk.DataStreamRequest.Stream<Value, prism_ios_native_sdk.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: prism_ios_native_sdk.DataStreamRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : prism_ios_native_sdk.DataStreamSerializer
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, prism_ios_native_sdk.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, prism_ios_native_sdk.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == prism_ios_native_sdk.DataStreamPublisher<Value>.Failure, S.Input == prism_ios_native_sdk.DataStreamPublisher<Value>.Output
}
extension prism_ios_native_sdk.DataStreamRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> prism_ios_native_sdk.DataStreamPublisher<Serializer.SerializedObject> where Serializer : prism_ios_native_sdk.DataStreamSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishData(queue: Dispatch.DispatchQueue = .main) -> prism_ios_native_sdk.DataStreamPublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishString(queue: Dispatch.DispatchQueue = .main) -> prism_ios_native_sdk.DataStreamPublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, decoder: prism_ios_native_sdk.DataDecoder = JSONDecoder(), preprocessor: prism_ios_native_sdk.DataPreprocessor = PassthroughPreprocessor()) -> prism_ios_native_sdk.DataStreamPublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DownloadResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = prism_ios_native_sdk.DownloadResponse<Value, prism_ios_native_sdk.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: prism_ios_native_sdk.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : prism_ios_native_sdk.ResponseSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init<Serializer>(_ request: prism_ios_native_sdk.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : prism_ios_native_sdk.DownloadResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, prism_ios_native_sdk.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, prism_ios_native_sdk.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == prism_ios_native_sdk.DownloadResponsePublisher<Value>.Failure, S.Input == prism_ios_native_sdk.DownloadResponsePublisher<Value>.Output
}
extension prism_ios_native_sdk.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> prism_ios_native_sdk.DownloadResponsePublisher<T> where Serializer : prism_ios_native_sdk.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> prism_ios_native_sdk.DownloadResponsePublisher<T> where Serializer : prism_ios_native_sdk.DownloadResponseSerializerProtocol, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishURL(queue: Dispatch.DispatchQueue = .main) -> prism_ios_native_sdk.DownloadResponsePublisher<Foundation.URL>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: prism_ios_native_sdk.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> prism_ios_native_sdk.DownloadResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: prism_ios_native_sdk.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> prism_ios_native_sdk.DownloadResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  @available(*, deprecated, message: "Renamed publishDecodable(type:queue:preprocessor:decoder:emptyResponseCodes:emptyRequestMethods).")
  @_disfavoredOverload public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: prism_ios_native_sdk.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: prism_ios_native_sdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> prism_ios_native_sdk.DownloadResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: prism_ios_native_sdk.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: prism_ios_native_sdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> prism_ios_native_sdk.DownloadResponsePublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension prism_ios_native_sdk.DownloadResponsePublisher where Value == Foundation.URL? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: prism_ios_native_sdk.DownloadRequest, queue: Dispatch.DispatchQueue)
}
extension prism_ios_native_sdk.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(on queue: Dispatch.DispatchQueue = .main) -> prism_ios_native_sdk.DownloadResponsePublisher<Foundation.URL?>
}
@available(iOSApplicationExtension, unavailable)
@objc final public class IQInvocation : ObjectiveC.NSObject {
  @objc weak final public var target: Swift.AnyObject?
  @objc final public var action: ObjectiveC.Selector
  @objc public init(_ target: Swift.AnyObject, _ action: ObjectiveC.Selector)
  @objc final public func invoke(from: Any)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@objc final public class IQKeyboardReturnKeyHandler : ObjectiveC.NSObject {
  @objc weak final public var delegate: (UIKit.UITextFieldDelegate & UIKit.UITextViewDelegate)?
  @objc final public var lastTextFieldReturnKeyType: UIKit.UIReturnKeyType {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(controller: UIKit.UIViewController)
  @objc deinit
  @objc final public func addTextFieldView(_ view: UIKit.UIView)
  @objc final public func removeTextFieldView(_ view: UIKit.UIView)
  @objc final public func addResponderFromView(_ view: UIKit.UIView)
  @objc final public func removeResponderFromView(_ view: UIKit.UIView)
}
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQKeyboardReturnKeyHandler : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
  @_Concurrency.MainActor(unsafe) @objc final public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQKeyboardReturnKeyHandler : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS, deprecated: 10.0)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange) -> Swift.Bool
  @available(iOS, deprecated: 10.0)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange) -> Swift.Bool
}
extension prism_ios_native_sdk.Request {
  public static let didResumeNotification: Foundation.Notification.Name
  public static let didSuspendNotification: Foundation.Notification.Name
  public static let didCancelNotification: Foundation.Notification.Name
  public static let didFinishNotification: Foundation.Notification.Name
  public static let didResumeTaskNotification: Foundation.Notification.Name
  public static let didSuspendTaskNotification: Foundation.Notification.Name
  public static let didCancelTaskNotification: Foundation.Notification.Name
  public static let didCompleteTaskNotification: Foundation.Notification.Name
}
extension Foundation.Notification {
  public var request: prism_ios_native_sdk.Request? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AlamofireNotifications : prism_ios_native_sdk.EventMonitor {
  final public func requestDidResume(_ request: prism_ios_native_sdk.Request)
  final public func requestDidSuspend(_ request: prism_ios_native_sdk.Request)
  final public func requestDidCancel(_ request: prism_ios_native_sdk.Request)
  final public func requestDidFinish(_ request: prism_ios_native_sdk.Request)
  final public func request(_ request: prism_ios_native_sdk.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func request(_ request: prism_ios_native_sdk.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func request(_ request: prism_ios_native_sdk.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: prism_ios_native_sdk.Request, didCompleteTask task: Foundation.URLSessionTask, with error: prism_ios_native_sdk.AFError?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@objc final public class IQKeyboardManager : ObjectiveC.NSObject {
  @objc public static let shared: prism_ios_native_sdk.IQKeyboardManager
  @objc final public var enable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var keyboardDistanceFromTextField: CoreGraphics.CGFloat
  @objc final public var enableAutoToolbar: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var toolbarManageBehaviour: prism_ios_native_sdk.IQAutoToolbarManageBehaviour
  @objc final public var shouldToolbarUsesTextFieldTintColor: Swift.Bool
  @objc final public var toolbarTintColor: UIKit.UIColor?
  @objc final public var toolbarBarTintColor: UIKit.UIColor?
  @objc final public var previousNextDisplayMode: prism_ios_native_sdk.IQPreviousNextDisplayMode
  @objc final public var toolbarPreviousBarButtonItemImage: UIKit.UIImage?
  @objc final public var toolbarNextBarButtonItemImage: UIKit.UIImage?
  @objc final public var toolbarDoneBarButtonItemImage: UIKit.UIImage?
  @objc final public var toolbarPreviousBarButtonItemText: Swift.String?
  @objc final public var toolbarPreviousBarButtonItemAccessibilityLabel: Swift.String?
  @objc final public var toolbarNextBarButtonItemText: Swift.String?
  @objc final public var toolbarNextBarButtonItemAccessibilityLabel: Swift.String?
  @objc final public var toolbarDoneBarButtonItemText: Swift.String?
  @objc final public var toolbarDoneBarButtonItemAccessibilityLabel: Swift.String?
  @objc final public var shouldShowToolbarPlaceholder: Swift.Bool
  @objc final public var placeholderFont: UIKit.UIFont?
  @objc final public var placeholderColor: UIKit.UIColor?
  @objc final public var placeholderButtonColor: UIKit.UIColor?
  @objc final public var overrideKeyboardAppearance: Swift.Bool
  @objc final public var keyboardAppearance: UIKit.UIKeyboardAppearance
  @objc final public var shouldResignOnTouchOutside: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var resignFirstResponderGesture: UIKit.UITapGestureRecognizer {
    @objc get
    @objc set
  }
  @discardableResult
  @objc final public func resignFirstResponder() -> Swift.Bool
  @objc final public var shouldPlayInputClicks: Swift.Bool
  @objc final public var layoutIfNeededOnUpdate: Swift.Bool
  @objc final public var disabledDistanceHandlingClasses: [UIKit.UIViewController.Type]
  @objc final public var enabledDistanceHandlingClasses: [UIKit.UIViewController.Type]
  @objc final public var disabledToolbarClasses: [UIKit.UIViewController.Type]
  @objc final public var enabledToolbarClasses: [UIKit.UIViewController.Type]
  @objc final public var toolbarPreviousNextAllowedClasses: [UIKit.UIView.Type]
  @objc final public var disabledTouchResignedClasses: [UIKit.UIViewController.Type]
  @objc final public var enabledTouchResignedClasses: [UIKit.UIViewController.Type]
  @objc final public var touchResignedGestureIgnoreClasses: [UIKit.UIView.Type]
  @objc final public func registerTextFieldViewClass(_ aClass: UIKit.UIView.Type, didBeginEditingNotificationName: Swift.String, didEndEditingNotificationName: Swift.String)
  @objc final public func unregisterTextFieldViewClass(_ aClass: UIKit.UIView.Type, didBeginEditingNotificationName: Swift.String, didEndEditingNotificationName: Swift.String)
  @objc deinit
  @objc final public func reloadLayoutIfNeeded()
}
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQKeyboardManager : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
extension Foundation.URLSessionConfiguration : prism_ios_native_sdk.AlamofireExtended {
  public typealias ExtendedType = Foundation.URLSessionConfiguration
}
extension prism_ios_native_sdk.AlamofireExtension where ExtendedType : Foundation.URLSessionConfiguration {
  public static var `default`: Foundation.URLSessionConfiguration {
    get
  }
  public static var ephemeral: Foundation.URLSessionConfiguration {
    get
  }
}
final public class URLEncodedFormEncoder {
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    case indexInBrackets
    public static func == (a: prism_ios_native_sdk.URLEncodedFormEncoder.ArrayEncoding, b: prism_ios_native_sdk.URLEncodedFormEncoder.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: prism_ios_native_sdk.URLEncodedFormEncoder.BoolEncoding, b: prism_ios_native_sdk.URLEncodedFormEncoder.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DataEncoding {
    case deferredToData
    case base64
    case custom((Foundation.Data) throws -> Swift.String)
  }
  public enum DateEncoding {
    case deferredToDate
    case secondsSince1970
    case millisecondsSince1970
    case iso8601
    case formatted(Foundation.DateFormatter)
    case custom((Foundation.Date) throws -> Swift.String)
  }
  public enum KeyEncoding {
    case useDefaultKeys
    case convertToSnakeCase
    case convertToKebabCase
    case capitalized
    case uppercased
    case lowercased
    case custom((Swift.String) -> Swift.String)
  }
  public enum SpaceEncoding {
    case percentEscaped
    case plusReplaced
    public static func == (a: prism_ios_native_sdk.URLEncodedFormEncoder.SpaceEncoding, b: prism_ios_native_sdk.URLEncodedFormEncoder.SpaceEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Error : Swift.Error {
    case invalidRootObject(Swift.String)
  }
  final public let alphabetizeKeyValuePairs: Swift.Bool
  final public let arrayEncoding: prism_ios_native_sdk.URLEncodedFormEncoder.ArrayEncoding
  final public let boolEncoding: prism_ios_native_sdk.URLEncodedFormEncoder.BoolEncoding
  final public let dataEncoding: prism_ios_native_sdk.URLEncodedFormEncoder.DataEncoding
  final public let dateEncoding: prism_ios_native_sdk.URLEncodedFormEncoder.DateEncoding
  final public let keyEncoding: prism_ios_native_sdk.URLEncodedFormEncoder.KeyEncoding
  final public let spaceEncoding: prism_ios_native_sdk.URLEncodedFormEncoder.SpaceEncoding
  final public var allowedCharacters: Foundation.CharacterSet
  public init(alphabetizeKeyValuePairs: Swift.Bool = true, arrayEncoding: prism_ios_native_sdk.URLEncodedFormEncoder.ArrayEncoding = .brackets, boolEncoding: prism_ios_native_sdk.URLEncodedFormEncoder.BoolEncoding = .numeric, dataEncoding: prism_ios_native_sdk.URLEncodedFormEncoder.DataEncoding = .base64, dateEncoding: prism_ios_native_sdk.URLEncodedFormEncoder.DateEncoding = .deferredToDate, keyEncoding: prism_ios_native_sdk.URLEncodedFormEncoder.KeyEncoding = .useDefaultKeys, spaceEncoding: prism_ios_native_sdk.URLEncodedFormEncoder.SpaceEncoding = .percentEscaped, allowedCharacters: Foundation.CharacterSet = .afURLQueryAllowed)
  final public func encode(_ value: Swift.Encodable) throws -> Swift.String
  final public func encode(_ value: Swift.Encodable) throws -> Foundation.Data
  @objc deinit
}
extension Foundation.CharacterSet {
  public static let afURLQueryAllowed: Foundation.CharacterSet
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoding {
  func encode(_ urlRequest: prism_ios_native_sdk.URLRequestConvertible, with parameters: prism_ios_native_sdk.Parameters?) throws -> Foundation.URLRequest
}
public struct URLEncoding : prism_ios_native_sdk.ParameterEncoding {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: prism_ios_native_sdk.URLEncoding.Destination, b: prism_ios_native_sdk.URLEncoding.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    case indexInBrackets
    public static func == (a: prism_ios_native_sdk.URLEncoding.ArrayEncoding, b: prism_ios_native_sdk.URLEncoding.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: prism_ios_native_sdk.URLEncoding.BoolEncoding, b: prism_ios_native_sdk.URLEncoding.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: prism_ios_native_sdk.URLEncoding {
    get
  }
  public static var queryString: prism_ios_native_sdk.URLEncoding {
    get
  }
  public static var httpBody: prism_ios_native_sdk.URLEncoding {
    get
  }
  public let destination: prism_ios_native_sdk.URLEncoding.Destination
  public let arrayEncoding: prism_ios_native_sdk.URLEncoding.ArrayEncoding
  public let boolEncoding: prism_ios_native_sdk.URLEncoding.BoolEncoding
  public init(destination: prism_ios_native_sdk.URLEncoding.Destination = .methodDependent, arrayEncoding: prism_ios_native_sdk.URLEncoding.ArrayEncoding = .brackets, boolEncoding: prism_ios_native_sdk.URLEncoding.BoolEncoding = .numeric)
  public func encode(_ urlRequest: prism_ios_native_sdk.URLRequestConvertible, with parameters: prism_ios_native_sdk.Parameters?) throws -> Foundation.URLRequest
  public func queryComponents(fromKey key: Swift.String, value: Any) -> [(Swift.String, Swift.String)]
  public func escape(_ string: Swift.String) -> Swift.String
}
public struct JSONEncoding : prism_ios_native_sdk.ParameterEncoding {
  public static var `default`: prism_ios_native_sdk.JSONEncoding {
    get
  }
  public static var prettyPrinted: prism_ios_native_sdk.JSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: prism_ios_native_sdk.URLRequestConvertible, with parameters: prism_ios_native_sdk.Parameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: prism_ios_native_sdk.URLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
public protocol URLConvertible {
  func asURL() throws -> Foundation.URL
}
extension Swift.String : prism_ios_native_sdk.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URL : prism_ios_native_sdk.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URLComponents : prism_ios_native_sdk.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
public protocol URLRequestConvertible {
  func asURLRequest() throws -> Foundation.URLRequest
}
extension prism_ios_native_sdk.URLRequestConvertible {
  public var urlRequest: Foundation.URLRequest? {
    get
  }
}
extension Foundation.URLRequest : prism_ios_native_sdk.URLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
extension Foundation.URLRequest {
  public init(url: prism_ios_native_sdk.URLConvertible, method: prism_ios_native_sdk.HTTPMethod, headers: prism_ios_native_sdk.HTTPHeaders? = nil) throws
}
public struct HTTPHeaders {
  public init()
  public init(_ headers: [prism_ios_native_sdk.HTTPHeader])
  public init(_ dictionary: [Swift.String : Swift.String])
  public mutating func add(name: Swift.String, value: Swift.String)
  public mutating func add(_ header: prism_ios_native_sdk.HTTPHeader)
  public mutating func update(name: Swift.String, value: Swift.String)
  public mutating func update(_ header: prism_ios_native_sdk.HTTPHeader)
  public mutating func remove(name: Swift.String)
  public mutating func sort()
  public func sorted() -> prism_ios_native_sdk.HTTPHeaders
  public func value(for name: Swift.String) -> Swift.String?
  public subscript(name: Swift.String) -> Swift.String? {
    get
    set
  }
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
}
extension prism_ios_native_sdk.HTTPHeaders : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Swift.String)...)
  public typealias Key = Swift.String
  public typealias Value = Swift.String
}
extension prism_ios_native_sdk.HTTPHeaders : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: prism_ios_native_sdk.HTTPHeader...)
  public typealias ArrayLiteralElement = prism_ios_native_sdk.HTTPHeader
}
extension prism_ios_native_sdk.HTTPHeaders : Swift.Sequence {
  public func makeIterator() -> Swift.IndexingIterator<[prism_ios_native_sdk.HTTPHeader]>
}
extension prism_ios_native_sdk.HTTPHeaders : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> prism_ios_native_sdk.HTTPHeader {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Element = prism_ios_native_sdk.HTTPHeader
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<prism_ios_native_sdk.HTTPHeaders>
  public typealias Iterator = Swift.IndexingIterator<[prism_ios_native_sdk.HTTPHeader]>
  public typealias SubSequence = Swift.Slice<prism_ios_native_sdk.HTTPHeaders>
}
extension prism_ios_native_sdk.HTTPHeaders : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct HTTPHeader : Swift.Hashable {
  public let name: Swift.String
  public let value: Swift.String
  public init(name: Swift.String, value: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: prism_ios_native_sdk.HTTPHeader, b: prism_ios_native_sdk.HTTPHeader) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension prism_ios_native_sdk.HTTPHeader : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension prism_ios_native_sdk.HTTPHeader {
  public static func accept(_ value: Swift.String) -> prism_ios_native_sdk.HTTPHeader
  public static func acceptCharset(_ value: Swift.String) -> prism_ios_native_sdk.HTTPHeader
  public static func acceptLanguage(_ value: Swift.String) -> prism_ios_native_sdk.HTTPHeader
  public static func acceptEncoding(_ value: Swift.String) -> prism_ios_native_sdk.HTTPHeader
  public static func authorization(username: Swift.String, password: Swift.String) -> prism_ios_native_sdk.HTTPHeader
  public static func authorization(bearerToken: Swift.String) -> prism_ios_native_sdk.HTTPHeader
  public static func authorization(_ value: Swift.String) -> prism_ios_native_sdk.HTTPHeader
  public static func contentDisposition(_ value: Swift.String) -> prism_ios_native_sdk.HTTPHeader
  public static func contentType(_ value: Swift.String) -> prism_ios_native_sdk.HTTPHeader
  public static func userAgent(_ value: Swift.String) -> prism_ios_native_sdk.HTTPHeader
}
extension prism_ios_native_sdk.HTTPHeaders {
  public static let `default`: prism_ios_native_sdk.HTTPHeaders
}
extension prism_ios_native_sdk.HTTPHeader {
  public static let defaultAcceptEncoding: prism_ios_native_sdk.HTTPHeader
  public static let defaultAcceptLanguage: prism_ios_native_sdk.HTTPHeader
  public static let defaultUserAgent: prism_ios_native_sdk.HTTPHeader
}
extension Foundation.URLRequest {
  public var headers: prism_ios_native_sdk.HTTPHeaders {
    get
    set
  }
}
extension Foundation.HTTPURLResponse {
  public var headers: prism_ios_native_sdk.HTTPHeaders {
    get
  }
}
extension Foundation.URLSessionConfiguration {
  public var headers: prism_ios_native_sdk.HTTPHeaders {
    get
    set
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = ToastManager.shared.duration, position: prism_ios_native_sdk.ToastPosition = ToastManager.shared.position, title: Swift.String? = nil, image: UIKit.UIImage? = nil, style: prism_ios_native_sdk.ToastStyle = ToastManager.shared.style, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = ToastManager.shared.duration, point: CoreGraphics.CGPoint, title: Swift.String?, image: UIKit.UIImage?, style: prism_ios_native_sdk.ToastStyle = ToastManager.shared.style, completion: ((_ didTap: Swift.Bool) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval = ToastManager.shared.duration, position: prism_ios_native_sdk.ToastPosition = ToastManager.shared.position, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval = ToastManager.shared.duration, point: CoreGraphics.CGPoint, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func hideToast()
  @_Concurrency.MainActor(unsafe) public func hideToast(_ toast: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func hideAllToasts(includeActivity: Swift.Bool = false, clearQueue: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func clearToastQueue()
  @_Concurrency.MainActor(unsafe) public func makeToastActivity(_ position: prism_ios_native_sdk.ToastPosition)
  @_Concurrency.MainActor(unsafe) public func makeToastActivity(_ point: CoreGraphics.CGPoint)
  @_Concurrency.MainActor(unsafe) public func hideToastActivity()
  @_Concurrency.MainActor(unsafe) public func toastViewForMessage(_ message: Swift.String?, title: Swift.String?, image: UIKit.UIImage?, style: prism_ios_native_sdk.ToastStyle) throws -> UIKit.UIView
}
public struct ToastStyle {
  public init()
  public var backgroundColor: UIKit.UIColor
  public var titleColor: UIKit.UIColor
  public var messageColor: UIKit.UIColor
  public var maxWidthPercentage: CoreGraphics.CGFloat {
    get
    set
  }
  public var maxHeightPercentage: CoreGraphics.CGFloat {
    get
    set
  }
  public var horizontalPadding: CoreGraphics.CGFloat
  public var verticalPadding: CoreGraphics.CGFloat
  public var cornerRadius: CoreGraphics.CGFloat
  public var titleFont: UIKit.UIFont
  public var messageFont: UIKit.UIFont
  public var titleAlignment: UIKit.NSTextAlignment
  public var messageAlignment: UIKit.NSTextAlignment
  public var titleNumberOfLines: Swift.Int
  public var messageNumberOfLines: Swift.Int
  public var displayShadow: Swift.Bool
  public var shadowColor: UIKit.UIColor
  public var shadowOpacity: Swift.Float {
    get
    set
  }
  public var shadowRadius: CoreGraphics.CGFloat
  public var shadowOffset: CoreGraphics.CGSize
  public var imageSize: CoreGraphics.CGSize
  public var activitySize: CoreGraphics.CGSize
  public var fadeDuration: Swift.Double
  public var activityIndicatorColor: UIKit.UIColor
  public var activityBackgroundColor: UIKit.UIColor
}
@_hasMissingDesignatedInitializers public class ToastManager {
  public static let shared: prism_ios_native_sdk.ToastManager
  public var style: prism_ios_native_sdk.ToastStyle
  public var isTapToDismissEnabled: Swift.Bool
  public var isQueueEnabled: Swift.Bool
  public var duration: Swift.Double
  public var position: prism_ios_native_sdk.ToastPosition
  @objc deinit
}
public enum ToastPosition {
  case top
  case center
  case bottom
  public static func == (a: prism_ios_native_sdk.ToastPosition, b: prism_ios_native_sdk.ToastPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (prism_ios_native_sdk.Reachability) -> ()
  public typealias NetworkUnreachable = (prism_ios_native_sdk.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: prism_ios_native_sdk.Reachability.NetworkStatus, b: prism_ios_native_sdk.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: prism_ios_native_sdk.Reachability.Connection
    public static func == (a: prism_ios_native_sdk.Reachability.Connection, b: prism_ios_native_sdk.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: prism_ios_native_sdk.Reachability.NetworkReachable?
  public var whenUnreachable: prism_ios_native_sdk.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: prism_ios_native_sdk.Reachability.Connection {
    get
  }
  public var connection: prism_ios_native_sdk.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension prism_ios_native_sdk.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(prism_ios_native_sdk.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType)
    public enum ConnectionType {
      case ethernetOrWiFi
      case cellular
      public static func == (a: prism_ios_native_sdk.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType, b: prism_ios_native_sdk.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public typealias Listener = (prism_ios_native_sdk.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  public static let `default`: prism_ios_native_sdk.NetworkReachabilityManager?
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnCellular: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  final public let reachabilityQueue: Dispatch.DispatchQueue
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var status: prism_ios_native_sdk.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening(onQueue queue: Dispatch.DispatchQueue = .main, onUpdatePerforming listener: @escaping prism_ios_native_sdk.NetworkReachabilityManager.Listener) -> Swift.Bool
  open func stopListening()
}
extension prism_ios_native_sdk.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
  public static func == (a: prism_ios_native_sdk.NetworkReachabilityManager.NetworkReachabilityStatus, b: prism_ios_native_sdk.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@objc @_Concurrency.MainActor(unsafe) open class IQTitleBarButtonItem : prism_ios_native_sdk.IQBarButtonItem {
  @objc @_Concurrency.MainActor(unsafe) open var titleFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var title: Swift.String? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var titleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var selectableTitleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override open var invocation: prism_ios_native_sdk.IQInvocation? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) convenience public init(title: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQKeyboardManager {
  @objc final public var enableDebugging: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc final public func registerAllNotifications()
  @objc final public func unregisterAllNotifications()
  public struct Static {
  }
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func viewContainingController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func topMostController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func parentContainerViewController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func superviewOfClassType(_ classType: UIKit.UIView.Type, belowView: UIKit.UIView? = nil) -> UIKit.UIView?
}
open class MultipartFormData {
  public static let encodingMemoryThreshold: Swift.UInt64
  open var contentType: Swift.String {
    get
    set
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  final public let boundary: Swift.String
  public init(fileManager: Foundation.FileManager = .default, boundary: Swift.String? = nil)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: prism_ios_native_sdk.HTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@objc final public class IQBarButtonItemConfiguration : ObjectiveC.NSObject {
  @objc public init(barButtonSystemItem: UIKit.UIBarButtonItem.SystemItem, action: ObjectiveC.Selector)
  @objc public init(image: UIKit.UIImage, action: ObjectiveC.Selector)
  @objc public init(title: Swift.String, action: ObjectiveC.Selector)
  final public let barButtonSystemItem: UIKit.UIBarButtonItem.SystemItem?
  @objc final public let image: UIKit.UIImage?
  @objc final public let title: Swift.String?
  @objc final public let action: ObjectiveC.Selector?
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIImage {
  @objc public static func keyboardLeftImage() -> UIKit.UIImage?
  @objc public static func keyboardRightImage() -> UIKit.UIImage?
  @objc public static func keyboardUpImage() -> UIKit.UIImage?
  @objc public static func keyboardDownImage() -> UIKit.UIImage?
  @objc public static func keyboardPreviousImage() -> UIKit.UIImage?
  @objc public static func keyboardNextImage() -> UIKit.UIImage?
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var keyboardToolbar: prism_ios_native_sdk.IQToolbar {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldHideToolbarPlaceholder: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var toolbarPlaceholder: Swift.String? {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var drawingToolbarPlaceholder: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addKeyboardToolbarWithTarget(target: Swift.AnyObject?, titleText: Swift.String?, rightBarButtonConfiguration: prism_ios_native_sdk.IQBarButtonItemConfiguration?, previousBarButtonConfiguration: prism_ios_native_sdk.IQBarButtonItemConfiguration? = nil, nextBarButtonConfiguration: prism_ios_native_sdk.IQBarButtonItemConfiguration? = nil)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithImage(_ image: UIKit.UIImage, target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithImage(_ image: UIKit.UIImage, target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithText(_ text: Swift.String, target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithText(_ text: Swift.String, target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addCancelDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, cancelAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonTitle: Swift.String, rightButtonTitle: Swift.String, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonImage: UIKit.UIImage, rightButtonImage: UIKit.UIImage, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addCancelDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, cancelAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonTitle: Swift.String, rightButtonTitle: Swift.String, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonImage: UIKit.UIImage, rightButtonImage: UIKit.UIImage, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonImage: UIKit.UIImage, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonTitle: Swift.String, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonImage: UIKit.UIImage, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonTitle: Swift.String, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
}
public protocol DataResponseSerializerProtocol {
  associatedtype SerializedObject
  func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Self.SerializedObject
}
public protocol DownloadResponseSerializerProtocol {
  associatedtype SerializedObject
  func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Self.SerializedObject
}
public protocol ResponseSerializer : prism_ios_native_sdk.DataResponseSerializerProtocol, prism_ios_native_sdk.DownloadResponseSerializerProtocol {
  var dataPreprocessor: prism_ios_native_sdk.DataPreprocessor { get }
  var emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> { get }
  var emptyResponseCodes: Swift.Set<Swift.Int> { get }
}
public protocol DataPreprocessor {
  func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct PassthroughPreprocessor : prism_ios_native_sdk.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct GoogleXSSIPreprocessor : prism_ios_native_sdk.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
extension prism_ios_native_sdk.DataPreprocessor where Self == prism_ios_native_sdk.PassthroughPreprocessor {
  public static var passthrough: prism_ios_native_sdk.PassthroughPreprocessor {
    get
  }
}
extension prism_ios_native_sdk.DataPreprocessor where Self == prism_ios_native_sdk.GoogleXSSIPreprocessor {
  public static var googleXSSI: prism_ios_native_sdk.GoogleXSSIPreprocessor {
    get
  }
}
extension prism_ios_native_sdk.ResponseSerializer {
  public static var defaultDataPreprocessor: prism_ios_native_sdk.DataPreprocessor {
    get
  }
  public static var defaultEmptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> {
    get
  }
  public static var defaultEmptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public var dataPreprocessor: prism_ios_native_sdk.DataPreprocessor {
    get
  }
  public var emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> {
    get
  }
  public var emptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public func requestAllowsEmptyResponseData(_ request: Foundation.URLRequest?) -> Swift.Bool?
  public func responseAllowsEmptyResponseData(_ response: Foundation.HTTPURLResponse?) -> Swift.Bool?
  public func emptyResponseAllowed(forRequest request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?) -> Swift.Bool
}
extension prism_ios_native_sdk.DownloadResponseSerializerProtocol where Self : prism_ios_native_sdk.DataResponseSerializerProtocol {
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Self.SerializedObject
}
extension prism_ios_native_sdk.DataRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (prism_ios_native_sdk.AFDataResponse<Foundation.Data?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (prism_ios_native_sdk.AFDataResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : prism_ios_native_sdk.DataResponseSerializerProtocol
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (prism_ios_native_sdk.AFDataResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : prism_ios_native_sdk.ResponseSerializer
}
extension prism_ios_native_sdk.DownloadRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (prism_ios_native_sdk.AFDownloadResponse<Foundation.URL?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (prism_ios_native_sdk.AFDownloadResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : prism_ios_native_sdk.DownloadResponseSerializerProtocol
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (prism_ios_native_sdk.AFDownloadResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : prism_ios_native_sdk.ResponseSerializer
}
public struct URLResponseSerializer : prism_ios_native_sdk.DownloadResponseSerializerProtocol {
  public init()
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: Swift.Error?) throws -> Foundation.URL
  public typealias SerializedObject = Foundation.URL
}
extension prism_ios_native_sdk.DownloadResponseSerializerProtocol where Self == prism_ios_native_sdk.URLResponseSerializer {
  public static var url: prism_ios_native_sdk.URLResponseSerializer {
    get
  }
}
extension prism_ios_native_sdk.DownloadRequest {
  @discardableResult
  public func responseURL(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (prism_ios_native_sdk.AFDownloadResponse<Foundation.URL>) -> Swift.Void) -> Self
}
final public class DataResponseSerializer : prism_ios_native_sdk.ResponseSerializer {
  final public let dataPreprocessor: prism_ios_native_sdk.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod>
  public init(dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
  @objc deinit
}
extension prism_ios_native_sdk.ResponseSerializer where Self == prism_ios_native_sdk.DataResponseSerializer {
  public static var data: prism_ios_native_sdk.DataResponseSerializer {
    get
  }
  public static func data(dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> prism_ios_native_sdk.DataResponseSerializer
}
extension prism_ios_native_sdk.DataRequest {
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (prism_ios_native_sdk.AFDataResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension prism_ios_native_sdk.DownloadRequest {
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (prism_ios_native_sdk.AFDownloadResponse<Foundation.Data>) -> Swift.Void) -> Self
}
final public class StringResponseSerializer : prism_ios_native_sdk.ResponseSerializer {
  final public let dataPreprocessor: prism_ios_native_sdk.DataPreprocessor
  final public let encoding: Swift.String.Encoding?
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod>
  public init(dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Swift.String
  public typealias SerializedObject = Swift.String
  @objc deinit
}
extension prism_ios_native_sdk.ResponseSerializer where Self == prism_ios_native_sdk.StringResponseSerializer {
  public static var string: prism_ios_native_sdk.StringResponseSerializer {
    get
  }
  public static func string(dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> prism_ios_native_sdk.StringResponseSerializer
}
extension prism_ios_native_sdk.DataRequest {
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (prism_ios_native_sdk.AFDataResponse<Swift.String>) -> Swift.Void) -> Self
}
extension prism_ios_native_sdk.DownloadRequest {
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (prism_ios_native_sdk.AFDownloadResponse<Swift.String>) -> Swift.Void) -> Self
}
@available(*, deprecated, message: "JSONResponseSerializer deprecated and will be removed in Alamofire 6. Use DecodableResponseSerializer instead.")
final public class JSONResponseSerializer : prism_ios_native_sdk.ResponseSerializer {
  final public let dataPreprocessor: prism_ios_native_sdk.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod>
  final public let options: Foundation.JSONSerialization.ReadingOptions
  public init(dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> Any
  public typealias SerializedObject = Any
  @objc deinit
}
extension prism_ios_native_sdk.DataRequest {
  @available(*, deprecated, message: "responseJSON deprecated and will be removed in Alamofire 6. Use responseDecodable instead.")
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (prism_ios_native_sdk.AFDataResponse<Any>) -> Swift.Void) -> Self
}
extension prism_ios_native_sdk.DownloadRequest {
  @available(*, deprecated, message: "responseJSON deprecated and will be removed in Alamofire 6. Use responseDecodable instead.")
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (prism_ios_native_sdk.AFDownloadResponse<Any>) -> Swift.Void) -> Self
}
public protocol EmptyResponse {
  static func emptyValue() -> Self
}
public struct Empty : Swift.Codable {
  public static let value: prism_ios_native_sdk.Empty
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension prism_ios_native_sdk.Empty : prism_ios_native_sdk.EmptyResponse {
  public static func emptyValue() -> prism_ios_native_sdk.Empty
}
public protocol DataDecoder {
  func decode<D>(_ type: D.Type, from data: Foundation.Data) throws -> D where D : Swift.Decodable
}
extension Foundation.JSONDecoder : prism_ios_native_sdk.DataDecoder {
}
extension Foundation.PropertyListDecoder : prism_ios_native_sdk.DataDecoder {
}
final public class DecodableResponseSerializer<T> : prism_ios_native_sdk.ResponseSerializer where T : Swift.Decodable {
  final public let dataPreprocessor: prism_ios_native_sdk.DataPreprocessor
  final public let decoder: prism_ios_native_sdk.DataDecoder
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod>
  public init(dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = DecodableResponseSerializer.defaultDataPreprocessor, decoder: prism_ios_native_sdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DecodableResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) throws -> T
  public typealias SerializedObject = T
  @objc deinit
}
extension prism_ios_native_sdk.ResponseSerializer {
  public static func decodable<T>(of type: T.Type, dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: prism_ios_native_sdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> prism_ios_native_sdk.DecodableResponseSerializer<T> where Self == prism_ios_native_sdk.DecodableResponseSerializer<T>, T : Swift.Decodable
}
extension prism_ios_native_sdk.DataRequest {
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: prism_ios_native_sdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (prism_ios_native_sdk.AFDataResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
}
extension prism_ios_native_sdk.DownloadRequest {
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: prism_ios_native_sdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (prism_ios_native_sdk.AFDownloadResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
}
public protocol DataStreamSerializer {
  associatedtype SerializedObject
  func serialize(_ data: Foundation.Data) throws -> Self.SerializedObject
}
public struct DecodableStreamSerializer<T> : prism_ios_native_sdk.DataStreamSerializer where T : Swift.Decodable {
  public let decoder: prism_ios_native_sdk.DataDecoder
  public let dataPreprocessor: prism_ios_native_sdk.DataPreprocessor
  public init(decoder: prism_ios_native_sdk.DataDecoder = JSONDecoder(), dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = PassthroughPreprocessor())
  public func serialize(_ data: Foundation.Data) throws -> T
  public typealias SerializedObject = T
}
public struct PassthroughStreamSerializer : prism_ios_native_sdk.DataStreamSerializer {
  public init()
  public func serialize(_ data: Foundation.Data) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
}
public struct StringStreamSerializer : prism_ios_native_sdk.DataStreamSerializer {
  public init()
  public func serialize(_ data: Foundation.Data) throws -> Swift.String
  public typealias SerializedObject = Swift.String
}
extension prism_ios_native_sdk.DataStreamSerializer {
  public static func decodable<T>(of type: T.Type, decoder: prism_ios_native_sdk.DataDecoder = JSONDecoder(), dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = PassthroughPreprocessor()) -> Self where Self == prism_ios_native_sdk.DecodableStreamSerializer<T>, T : Swift.Decodable
}
extension prism_ios_native_sdk.DataStreamSerializer where Self == prism_ios_native_sdk.PassthroughStreamSerializer {
  public static var passthrough: prism_ios_native_sdk.PassthroughStreamSerializer {
    get
  }
}
extension prism_ios_native_sdk.DataStreamSerializer where Self == prism_ios_native_sdk.StringStreamSerializer {
  public static var string: prism_ios_native_sdk.StringStreamSerializer {
    get
  }
}
extension prism_ios_native_sdk.DataStreamRequest {
  @discardableResult
  final public func responseStream(on queue: Dispatch.DispatchQueue = .main, stream: @escaping prism_ios_native_sdk.DataStreamRequest.Handler<Foundation.Data, Swift.Never>) -> Self
  @discardableResult
  final public func responseStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main, stream: @escaping prism_ios_native_sdk.DataStreamRequest.Handler<Serializer.SerializedObject, prism_ios_native_sdk.AFError>) -> Self where Serializer : prism_ios_native_sdk.DataStreamSerializer
  @discardableResult
  final public func responseStreamString(on queue: Dispatch.DispatchQueue = .main, stream: @escaping prism_ios_native_sdk.DataStreamRequest.Handler<Swift.String, Swift.Never>) -> Self
  @discardableResult
  final public func responseStreamDecodable<T>(of type: T.Type = T.self, on queue: Dispatch.DispatchQueue = .main, using decoder: prism_ios_native_sdk.DataDecoder = JSONDecoder(), preprocessor: prism_ios_native_sdk.DataPreprocessor = PassthroughPreprocessor(), stream: @escaping prism_ios_native_sdk.DataStreamRequest.Handler<T, prism_ios_native_sdk.AFError>) -> Self where T : Swift.Decodable
}
public struct RequestAdapterState {
  public let requestID: Foundation.UUID
  public let session: prism_ios_native_sdk.Session
}
public protocol RequestAdapter {
  func adapt(_ urlRequest: Foundation.URLRequest, for session: prism_ios_native_sdk.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  func adapt(_ urlRequest: Foundation.URLRequest, using state: prism_ios_native_sdk.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
}
extension prism_ios_native_sdk.RequestAdapter {
  public func adapt(_ urlRequest: Foundation.URLRequest, using state: prism_ios_native_sdk.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
}
public enum RetryResult {
  case retry
  case retryWithDelay(Foundation.TimeInterval)
  case doNotRetry
  case doNotRetryWithError(Swift.Error)
}
public protocol RequestRetrier {
  func retry(_ request: prism_ios_native_sdk.Request, for session: prism_ios_native_sdk.Session, dueTo error: Swift.Error, completion: @escaping (prism_ios_native_sdk.RetryResult) -> Swift.Void)
}
public protocol RequestInterceptor : prism_ios_native_sdk.RequestAdapter, prism_ios_native_sdk.RequestRetrier {
}
extension prism_ios_native_sdk.RequestInterceptor {
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: prism_ios_native_sdk.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  public func retry(_ request: prism_ios_native_sdk.Request, for session: prism_ios_native_sdk.Session, dueTo error: Swift.Error, completion: @escaping (prism_ios_native_sdk.RetryResult) -> Swift.Void)
}
public typealias AdaptHandler = (Foundation.URLRequest, prism_ios_native_sdk.Session, _ completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void) -> Swift.Void
public typealias RetryHandler = (prism_ios_native_sdk.Request, prism_ios_native_sdk.Session, Swift.Error, _ completion: @escaping (prism_ios_native_sdk.RetryResult) -> Swift.Void) -> Swift.Void
open class Adapter : prism_ios_native_sdk.RequestInterceptor {
  public init(_ adaptHandler: @escaping prism_ios_native_sdk.AdaptHandler)
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: prism_ios_native_sdk.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  open func adapt(_ urlRequest: Foundation.URLRequest, using state: prism_ios_native_sdk.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension prism_ios_native_sdk.RequestAdapter where Self == prism_ios_native_sdk.Adapter {
  public static func adapter(using closure: @escaping prism_ios_native_sdk.AdaptHandler) -> prism_ios_native_sdk.Adapter
}
open class Retrier : prism_ios_native_sdk.RequestInterceptor {
  public init(_ retryHandler: @escaping prism_ios_native_sdk.RetryHandler)
  open func retry(_ request: prism_ios_native_sdk.Request, for session: prism_ios_native_sdk.Session, dueTo error: Swift.Error, completion: @escaping (prism_ios_native_sdk.RetryResult) -> Swift.Void)
  @objc deinit
}
extension prism_ios_native_sdk.RequestRetrier where Self == prism_ios_native_sdk.Retrier {
  public static func retrier(using closure: @escaping prism_ios_native_sdk.RetryHandler) -> prism_ios_native_sdk.Retrier
}
open class Interceptor : prism_ios_native_sdk.RequestInterceptor {
  final public let adapters: [prism_ios_native_sdk.RequestAdapter]
  final public let retriers: [prism_ios_native_sdk.RequestRetrier]
  public init(adaptHandler: @escaping prism_ios_native_sdk.AdaptHandler, retryHandler: @escaping prism_ios_native_sdk.RetryHandler)
  public init(adapter: prism_ios_native_sdk.RequestAdapter, retrier: prism_ios_native_sdk.RequestRetrier)
  public init(adapters: [prism_ios_native_sdk.RequestAdapter] = [], retriers: [prism_ios_native_sdk.RequestRetrier] = [], interceptors: [prism_ios_native_sdk.RequestInterceptor] = [])
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: prism_ios_native_sdk.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  open func adapt(_ urlRequest: Foundation.URLRequest, using state: prism_ios_native_sdk.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  open func retry(_ request: prism_ios_native_sdk.Request, for session: prism_ios_native_sdk.Session, dueTo error: Swift.Error, completion: @escaping (prism_ios_native_sdk.RetryResult) -> Swift.Void)
  @objc deinit
}
extension prism_ios_native_sdk.RequestInterceptor where Self == prism_ios_native_sdk.Interceptor {
  public static func interceptor(adapter: @escaping prism_ios_native_sdk.AdaptHandler, retrier: @escaping prism_ios_native_sdk.RetryHandler) -> prism_ios_native_sdk.Interceptor
  public static func interceptor(adapter: prism_ios_native_sdk.RequestAdapter, retrier: prism_ios_native_sdk.RequestRetrier) -> prism_ios_native_sdk.Interceptor
  public static func interceptor(adapters: [prism_ios_native_sdk.RequestAdapter] = [], retriers: [prism_ios_native_sdk.RequestRetrier] = [], interceptors: [prism_ios_native_sdk.RequestInterceptor] = []) -> prism_ios_native_sdk.Interceptor
}
public typealias AFDataResponse<Success> = prism_ios_native_sdk.DataResponse<Success, prism_ios_native_sdk.AFError>
public typealias AFDownloadResponse<Success> = prism_ios_native_sdk.DownloadResponse<Success, prism_ios_native_sdk.AFError>
public struct DataResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension prism_ios_native_sdk.DataResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension prism_ios_native_sdk.DataResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> prism_ios_native_sdk.DataResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> prism_ios_native_sdk.DataResponse<NewSuccess, Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> prism_ios_native_sdk.DataResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> prism_ios_native_sdk.DataResponse<Success, Swift.Error> where NewFailure : Swift.Error
}
public struct DownloadResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let fileURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, resumeData: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension prism_ios_native_sdk.DownloadResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension prism_ios_native_sdk.DownloadResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> prism_ios_native_sdk.DownloadResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> prism_ios_native_sdk.DownloadResponse<NewSuccess, Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> prism_ios_native_sdk.DownloadResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> prism_ios_native_sdk.DownloadResponse<Success, Swift.Error> where NewFailure : Swift.Error
}
@objc open class SessionDelegate : ObjectiveC.NSObject {
  public init(fileManager: Foundation.FileManager = .default)
  @objc deinit
}
extension prism_ios_native_sdk.SessionDelegate : Foundation.URLSessionDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
}
extension prism_ios_native_sdk.SessionDelegate : Foundation.URLSessionTaskDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, needNewBodyStream completionHandler: @escaping (Foundation.InputStream?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
}
extension prism_ios_native_sdk.SessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension prism_ios_native_sdk.SessionDelegate : Foundation.URLSessionDownloadDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIScrollView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldIgnoreScrollingAdjustment: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldIgnoreContentInsetAdjustment: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldRestoreScrollViewContentOffset: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
}
@available(iOSApplicationExtension, unavailable)
@objc public enum IQAutoToolbarManageBehaviour : Swift.Int {
  case bySubviews
  case byTag
  case byPosition
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
@objc public enum IQPreviousNextDisplayMode : Swift.Int {
  case `default`
  case alwaysHide
  case alwaysShow
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
@objc public enum IQEnableMode : Swift.Int {
  case `default`
  case enabled
  case disabled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension prism_ios_native_sdk.Request {
  public typealias ValidationResult = Swift.Result<Swift.Void, Swift.Error>
}
extension prism_ios_native_sdk.DataRequest {
  public typealias Validation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?) -> prism_ios_native_sdk.DataRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension prism_ios_native_sdk.DataStreamRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse) -> prism_ios_native_sdk.DataStreamRequest.ValidationResult
  @discardableResult
  final public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  final public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  final public func validate() -> Self
}
extension prism_ios_native_sdk.DownloadRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse, _ fileURL: Foundation.URL?) -> prism_ios_native_sdk.DownloadRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@objc @_Concurrency.MainActor(unsafe) open class IQToolbar : UIKit.UIToolbar, UIKit.UIInputViewAudioFeedback {
  @objc @_Concurrency.MainActor(unsafe) open var previousBarButton: prism_ios_native_sdk.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var nextBarButton: prism_ios_native_sdk.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var titleBarButton: prism_ios_native_sdk.IQTitleBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var doneBarButton: prism_ios_native_sdk.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var fixedSpaceBarButton: prism_ios_native_sdk.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc open var enableInputClicksWhenVisible: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Request {
  public enum State {
    case initialized
    case resumed
    case suspended
    case cancelled
    case finished
    public static func == (a: prism_ios_native_sdk.Request.State, b: prism_ios_native_sdk.Request.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let id: Foundation.UUID
  final public let underlyingQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let eventMonitor: prism_ios_native_sdk.EventMonitor?
  final public let interceptor: prism_ios_native_sdk.RequestInterceptor?
  weak public var delegate: prism_ios_native_sdk.RequestDelegate? {
    get
  }
  public var state: prism_ios_native_sdk.Request.State {
    get
  }
  public var isInitialized: Swift.Bool {
    get
  }
  public var isResumed: Swift.Bool {
    get
  }
  public var isSuspended: Swift.Bool {
    get
  }
  public var isCancelled: Swift.Bool {
    get
  }
  public var isFinished: Swift.Bool {
    get
  }
  public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
  final public let uploadProgress: Foundation.Progress
  final public let downloadProgress: Foundation.Progress
  public var redirectHandler: prism_ios_native_sdk.RedirectHandler? {
    get
  }
  public var cachedResponseHandler: prism_ios_native_sdk.CachedResponseHandler? {
    get
  }
  public var credential: Foundation.URLCredential? {
    get
  }
  public var requests: [Foundation.URLRequest] {
    get
  }
  public var firstRequest: Foundation.URLRequest? {
    get
  }
  public var lastRequest: Foundation.URLRequest? {
    get
  }
  public var request: Foundation.URLRequest? {
    get
  }
  public var performedRequests: [Foundation.URLRequest] {
    get
  }
  public var response: Foundation.HTTPURLResponse? {
    get
  }
  public var tasks: [Foundation.URLSessionTask] {
    get
  }
  public var firstTask: Foundation.URLSessionTask? {
    get
  }
  public var lastTask: Foundation.URLSessionTask? {
    get
  }
  public var task: Foundation.URLSessionTask? {
    get
  }
  public var allMetrics: [Foundation.URLSessionTaskMetrics] {
    get
  }
  public var firstMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var lastMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var retryCount: Swift.Int {
    get
  }
  public var error: prism_ios_native_sdk.AFError? {
    get
  }
  @discardableResult
  public func cancel() -> Self
  @discardableResult
  public func suspend() -> Self
  @discardableResult
  public func resume() -> Self
  @discardableResult
  public func authenticate(username: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession) -> Self
  @discardableResult
  public func authenticate(with credential: Foundation.URLCredential) -> Self
  @discardableResult
  public func downloadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping prism_ios_native_sdk.Request.ProgressHandler) -> Self
  @discardableResult
  public func uploadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping prism_ios_native_sdk.Request.ProgressHandler) -> Self
  @discardableResult
  public func redirect(using handler: prism_ios_native_sdk.RedirectHandler) -> Self
  @discardableResult
  public func cacheResponse(using handler: prism_ios_native_sdk.CachedResponseHandler) -> Self
  @discardableResult
  public func cURLDescription(on queue: Dispatch.DispatchQueue, calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @discardableResult
  public func cURLDescription(calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @discardableResult
  public func onURLRequestCreation(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.URLRequest) -> Swift.Void) -> Self
  @discardableResult
  public func onURLSessionTaskCreation(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.URLSessionTask) -> Swift.Void) -> Self
  @objc deinit
}
extension prism_ios_native_sdk.Request : Swift.Equatable {
  public static func == (lhs: prism_ios_native_sdk.Request, rhs: prism_ios_native_sdk.Request) -> Swift.Bool
}
extension prism_ios_native_sdk.Request : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension prism_ios_native_sdk.Request : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension prism_ios_native_sdk.Request {
  public func cURLDescription() -> Swift.String
}
public protocol RequestDelegate : AnyObject {
  var sessionConfiguration: Foundation.URLSessionConfiguration { get }
  var startImmediately: Swift.Bool { get }
  func cleanup(after request: prism_ios_native_sdk.Request)
  func retryResult(for request: prism_ios_native_sdk.Request, dueTo error: prism_ios_native_sdk.AFError, completion: @escaping (prism_ios_native_sdk.RetryResult) -> Swift.Void)
  func retryRequest(_ request: prism_ios_native_sdk.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
@_hasMissingDesignatedInitializers public class DataRequest : prism_ios_native_sdk.Request {
  final public let convertible: prism_ios_native_sdk.URLRequestConvertible
  public var data: Foundation.Data? {
    get
  }
  @discardableResult
  public func validate(_ validation: @escaping prism_ios_native_sdk.DataRequest.Validation) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DataStreamRequest : prism_ios_native_sdk.Request {
  public typealias Handler<Success, Failure> = (prism_ios_native_sdk.DataStreamRequest.Stream<Success, Failure>) throws -> Swift.Void where Failure : Swift.Error
  public struct Stream<Success, Failure> where Failure : Swift.Error {
    public let event: prism_ios_native_sdk.DataStreamRequest.Event<Success, Failure>
    public let token: prism_ios_native_sdk.DataStreamRequest.CancellationToken
    public func cancel()
  }
  public enum Event<Success, Failure> where Failure : Swift.Error {
    case stream(Swift.Result<Success, Failure>)
    case complete(prism_ios_native_sdk.DataStreamRequest.Completion)
  }
  public struct Completion {
    public let request: Foundation.URLRequest?
    public let response: Foundation.HTTPURLResponse?
    public let metrics: Foundation.URLSessionTaskMetrics?
    public let error: prism_ios_native_sdk.AFError?
  }
  public struct CancellationToken {
    public func cancel()
  }
  final public let convertible: prism_ios_native_sdk.URLRequestConvertible
  final public let automaticallyCancelOnStreamError: Swift.Bool
  @discardableResult
  final public func validate(_ validation: @escaping prism_ios_native_sdk.DataStreamRequest.Validation) -> Self
  final public func asInputStream(bufferSize: Swift.Int = 1024) -> Foundation.InputStream?
  @objc deinit
}
extension prism_ios_native_sdk.DataStreamRequest.Stream {
  public var result: Swift.Result<Success, Failure>? {
    get
  }
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public var completion: prism_ios_native_sdk.DataStreamRequest.Completion? {
    get
  }
}
@_hasMissingDesignatedInitializers public class DownloadRequest : prism_ios_native_sdk.Request {
  public struct Options : Swift.OptionSet {
    public static let createIntermediateDirectories: prism_ios_native_sdk.DownloadRequest.Options
    public static let removePreviousFile: prism_ios_native_sdk.DownloadRequest.Options
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = prism_ios_native_sdk.DownloadRequest.Options
    public typealias Element = prism_ios_native_sdk.DownloadRequest.Options
    public typealias RawValue = Swift.Int
  }
  public typealias Destination = (_ temporaryURL: Foundation.URL, _ response: Foundation.HTTPURLResponse) -> (destinationURL: Foundation.URL, options: prism_ios_native_sdk.DownloadRequest.Options)
  public class func suggestedDownloadDestination(for directory: Foundation.FileManager.SearchPathDirectory = .documentDirectory, in domain: Foundation.FileManager.SearchPathDomainMask = .userDomainMask, options: prism_ios_native_sdk.DownloadRequest.Options = []) -> prism_ios_native_sdk.DownloadRequest.Destination
  public enum Downloadable {
    case request(prism_ios_native_sdk.URLRequestConvertible)
    case resumeData(Foundation.Data)
  }
  public var resumeData: Foundation.Data? {
    get
  }
  public var fileURL: Foundation.URL? {
    get
  }
  final public let downloadable: prism_ios_native_sdk.DownloadRequest.Downloadable
  public func task(forResumeData data: Foundation.Data, using session: Foundation.URLSession) -> Foundation.URLSessionTask
  @discardableResult
  override public func cancel() -> Self
  @discardableResult
  public func cancel(producingResumeData shouldProduceResumeData: Swift.Bool) -> Self
  @discardableResult
  public func cancel(byProducingResumeData completionHandler: @escaping (_ data: Foundation.Data?) -> Swift.Void) -> Self
  @discardableResult
  public func validate(_ validation: @escaping prism_ios_native_sdk.DownloadRequest.Validation) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UploadRequest : prism_ios_native_sdk.DataRequest {
  public enum Uploadable {
    case data(Foundation.Data)
    case file(Foundation.URL, shouldRemove: Swift.Bool)
    case stream(Foundation.InputStream)
  }
  final public let upload: prism_ios_native_sdk.UploadableConvertible
  final public let fileManager: Foundation.FileManager
  public var uploadable: prism_ios_native_sdk.UploadRequest.Uploadable?
  public func cleanup()
  @objc deinit
}
public protocol UploadableConvertible {
  func createUploadable() throws -> prism_ios_native_sdk.UploadRequest.Uploadable
}
extension prism_ios_native_sdk.UploadRequest.Uploadable : prism_ios_native_sdk.UploadableConvertible {
  public func createUploadable() throws -> prism_ios_native_sdk.UploadRequest.Uploadable
}
public protocol UploadConvertible : prism_ios_native_sdk.URLRequestConvertible, prism_ios_native_sdk.UploadableConvertible {
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@objc @_Concurrency.MainActor(unsafe) open class IQPreviousNextView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@objc @_Concurrency.MainActor(unsafe) open class IQBarButtonItem : UIKit.UIBarButtonItem {
  @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func setTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector?)
  @objc @_Concurrency.MainActor(unsafe) open var invocation: prism_ios_native_sdk.IQInvocation?
  @objc deinit
}
open class ServerTrustManager {
  final public let allHostsMustBeEvaluated: Swift.Bool
  final public let evaluators: [Swift.String : prism_ios_native_sdk.ServerTrustEvaluating]
  public init(allHostsMustBeEvaluated: Swift.Bool = true, evaluators: [Swift.String : prism_ios_native_sdk.ServerTrustEvaluating])
  open func serverTrustEvaluator(forHost host: Swift.String) throws -> prism_ios_native_sdk.ServerTrustEvaluating?
  @objc deinit
}
public protocol ServerTrustEvaluating {
  func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
final public class DefaultTrustEvaluator : prism_ios_native_sdk.ServerTrustEvaluating {
  public init(validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class RevocationTrustEvaluator : prism_ios_native_sdk.ServerTrustEvaluating {
  public struct Options : Swift.OptionSet {
    public static let crl: prism_ios_native_sdk.RevocationTrustEvaluator.Options
    public static let networkAccessDisabled: prism_ios_native_sdk.RevocationTrustEvaluator.Options
    public static let ocsp: prism_ios_native_sdk.RevocationTrustEvaluator.Options
    public static let preferCRL: prism_ios_native_sdk.RevocationTrustEvaluator.Options
    public static let requirePositiveResponse: prism_ios_native_sdk.RevocationTrustEvaluator.Options
    public static let any: prism_ios_native_sdk.RevocationTrustEvaluator.Options
    public let rawValue: CoreFoundation.CFOptionFlags
    public init(rawValue: CoreFoundation.CFOptionFlags)
    public typealias ArrayLiteralElement = prism_ios_native_sdk.RevocationTrustEvaluator.Options
    public typealias Element = prism_ios_native_sdk.RevocationTrustEvaluator.Options
    public typealias RawValue = CoreFoundation.CFOptionFlags
  }
  public init(performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true, options: prism_ios_native_sdk.RevocationTrustEvaluator.Options = .any)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension prism_ios_native_sdk.ServerTrustEvaluating where Self == prism_ios_native_sdk.RevocationTrustEvaluator {
  public static var revocationChecking: prism_ios_native_sdk.RevocationTrustEvaluator {
    get
  }
  public static func revocationChecking(performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true, options: prism_ios_native_sdk.RevocationTrustEvaluator.Options = .any) -> prism_ios_native_sdk.RevocationTrustEvaluator
}
final public class PinnedCertificatesTrustEvaluator : prism_ios_native_sdk.ServerTrustEvaluating {
  public init(certificates: [Security.SecCertificate] = Bundle.main.af.certificates, acceptSelfSignedCertificates: Swift.Bool = false, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension prism_ios_native_sdk.ServerTrustEvaluating where Self == prism_ios_native_sdk.PinnedCertificatesTrustEvaluator {
  public static var pinnedCertificates: prism_ios_native_sdk.PinnedCertificatesTrustEvaluator {
    get
  }
  public static func pinnedCertificates(certificates: [Security.SecCertificate] = Bundle.main.af.certificates, acceptSelfSignedCertificates: Swift.Bool = false, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true) -> prism_ios_native_sdk.PinnedCertificatesTrustEvaluator
}
final public class PublicKeysTrustEvaluator : prism_ios_native_sdk.ServerTrustEvaluating {
  public init(keys: [Security.SecKey] = Bundle.main.af.publicKeys, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension prism_ios_native_sdk.ServerTrustEvaluating where Self == prism_ios_native_sdk.PublicKeysTrustEvaluator {
  public static var publicKeys: prism_ios_native_sdk.PublicKeysTrustEvaluator {
    get
  }
  public static func publicKeys(keys: [Security.SecKey] = Bundle.main.af.publicKeys, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true) -> prism_ios_native_sdk.PublicKeysTrustEvaluator
}
final public class CompositeTrustEvaluator : prism_ios_native_sdk.ServerTrustEvaluating {
  public init(evaluators: [prism_ios_native_sdk.ServerTrustEvaluating])
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension prism_ios_native_sdk.ServerTrustEvaluating where Self == prism_ios_native_sdk.CompositeTrustEvaluator {
  public static func composite(evaluators: [prism_ios_native_sdk.ServerTrustEvaluating]) -> prism_ios_native_sdk.CompositeTrustEvaluator
}
@available(*, deprecated, renamed: "DisabledTrustEvaluator", message: "DisabledEvaluator has been renamed DisabledTrustEvaluator.")
public typealias DisabledEvaluator = prism_ios_native_sdk.DisabledTrustEvaluator
final public class DisabledTrustEvaluator : prism_ios_native_sdk.ServerTrustEvaluating {
  public init()
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension Swift.Array where Element == prism_ios_native_sdk.ServerTrustEvaluating {
  public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
extension Foundation.Bundle : prism_ios_native_sdk.AlamofireExtended {
  public typealias ExtendedType = Foundation.Bundle
}
extension prism_ios_native_sdk.AlamofireExtension where ExtendedType : Foundation.Bundle {
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
  public func paths(forResourcesOfTypes types: [Swift.String]) -> [Swift.String]
}
extension Security.SecTrust : prism_ios_native_sdk.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrust
}
extension prism_ios_native_sdk.AlamofireExtension where ExtendedType == Security.SecTrust {
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate(afterApplying policy: Security.SecPolicy) throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate(afterApplying:)")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate(afterApplying:)")
  public func validate(policy: Security.SecPolicy, errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> Swift.Error) throws
  public func apply(policy: Security.SecPolicy) throws -> Security.SecTrust
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate() throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate()")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate()")
  public func validate(errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> Swift.Error) throws
  public func setAnchorCertificates(_ certificates: [Security.SecCertificate]) throws
  public var publicKeys: [Security.SecKey] {
    get
  }
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var certificateData: [Foundation.Data] {
    get
  }
  public func performDefaultValidation(forHost host: Swift.String) throws
  public func performValidation(forHost host: Swift.String) throws
}
extension Security.SecPolicy : prism_ios_native_sdk.AlamofireExtended {
  public typealias ExtendedType = Security.SecPolicy
}
extension prism_ios_native_sdk.AlamofireExtension where ExtendedType == Security.SecPolicy {
  public static let `default`: Security.SecPolicy
  public static func hostname(_ hostname: Swift.String) -> Security.SecPolicy
  public static func revocation(options: prism_ios_native_sdk.RevocationTrustEvaluator.Options) throws -> Security.SecPolicy
}
extension Swift.Array : prism_ios_native_sdk.AlamofireExtended {
  public typealias ExtendedType = Swift.Array<Element>
}
extension prism_ios_native_sdk.AlamofireExtension where ExtendedType == [Security.SecCertificate] {
  public var data: [Foundation.Data] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
}
extension Security.SecCertificate : prism_ios_native_sdk.AlamofireExtended {
  public typealias ExtendedType = Security.SecCertificate
}
extension prism_ios_native_sdk.AlamofireExtension where ExtendedType == Security.SecCertificate {
  public var publicKey: Security.SecKey? {
    get
  }
}
extension Swift.Int32 : prism_ios_native_sdk.AlamofireExtended {
  public typealias ExtendedType = Swift.Int32
}
extension prism_ios_native_sdk.AlamofireExtension where ExtendedType == Darwin.OSStatus {
  public var isSuccess: Swift.Bool {
    get
  }
}
extension Security.SecTrustResultType : prism_ios_native_sdk.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrustResultType
}
extension prism_ios_native_sdk.AlamofireExtension where ExtendedType == Security.SecTrustResultType {
  public var isSuccess: Swift.Bool {
    get
  }
}
public protocol CachedResponseHandler {
  func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
public struct ResponseCacher {
  public enum Behavior {
    case cache
    case doNotCache
    case modify((Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)
  }
  public static let cache: prism_ios_native_sdk.ResponseCacher
  public static let doNotCache: prism_ios_native_sdk.ResponseCacher
  public let behavior: prism_ios_native_sdk.ResponseCacher.Behavior
  public init(behavior: prism_ios_native_sdk.ResponseCacher.Behavior)
}
extension prism_ios_native_sdk.ResponseCacher : prism_ios_native_sdk.CachedResponseHandler {
  public func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension prism_ios_native_sdk.CachedResponseHandler where Self == prism_ios_native_sdk.ResponseCacher {
  public static var cache: prism_ios_native_sdk.ResponseCacher {
    get
  }
  public static var doNotCache: prism_ios_native_sdk.ResponseCacher {
    get
  }
  public static func modify(using closure: @escaping ((Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)) -> prism_ios_native_sdk.ResponseCacher
}
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQKeyboardManager {
  @objc final public var keyboardShowing: Swift.Bool {
    @objc get
  }
  @objc final public var keyboardFrame: CoreGraphics.CGRect {
    @objc get
  }
}
open class RetryPolicy : prism_ios_native_sdk.RequestInterceptor {
  public static let defaultRetryLimit: Swift.UInt
  public static let defaultExponentialBackoffBase: Swift.UInt
  public static let defaultExponentialBackoffScale: Swift.Double
  public static let defaultRetryableHTTPMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod>
  public static let defaultRetryableHTTPStatusCodes: Swift.Set<Swift.Int>
  public static let defaultRetryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  final public let retryLimit: Swift.UInt
  final public let exponentialBackoffBase: Swift.UInt
  final public let exponentialBackoffScale: Swift.Double
  final public let retryableHTTPMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod>
  final public let retryableHTTPStatusCodes: Swift.Set<Swift.Int>
  final public let retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods, retryableHTTPStatusCodes: Swift.Set<Swift.Int> = RetryPolicy.defaultRetryableHTTPStatusCodes, retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code> = RetryPolicy.defaultRetryableURLErrorCodes)
  open func retry(_ request: prism_ios_native_sdk.Request, for session: prism_ios_native_sdk.Session, dueTo error: Swift.Error, completion: @escaping (prism_ios_native_sdk.RetryResult) -> Swift.Void)
  open func shouldRetry(request: prism_ios_native_sdk.Request, dueTo error: Swift.Error) -> Swift.Bool
  @objc deinit
}
extension prism_ios_native_sdk.RequestInterceptor where Self == prism_ios_native_sdk.RetryPolicy {
  public static var retryPolicy: prism_ios_native_sdk.RetryPolicy {
    get
  }
  public static func retryPolicy(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods, retryableHTTPStatusCodes: Swift.Set<Swift.Int> = RetryPolicy.defaultRetryableHTTPStatusCodes, retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code> = RetryPolicy.defaultRetryableURLErrorCodes) -> prism_ios_native_sdk.RetryPolicy
}
open class ConnectionLostRetryPolicy : prism_ios_native_sdk.RetryPolicy {
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods)
  @objc deinit
}
extension prism_ios_native_sdk.RequestInterceptor where Self == prism_ios_native_sdk.ConnectionLostRetryPolicy {
  public static var connectionLostRetryPolicy: prism_ios_native_sdk.ConnectionLostRetryPolicy {
    get
  }
  public static func connectionLostRetryPolicy(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods) -> prism_ios_native_sdk.ConnectionLostRetryPolicy
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func imageFromUrl(urlString: Swift.String) -> UIKit.UIImage
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class Gradient : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct clientInfo {
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@objc @_Concurrency.MainActor(unsafe) open class IQTextView : UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect, textContainer: UIKit.NSTextContainer?)
  @objc override dynamic open func awakeFromNib()
  @objc deinit
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholderTextColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var attributedPlaceholder: Foundation.NSAttributedString? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String! {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var attributedText: Foundation.NSAttributedString! {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var font: UIKit.UIFont? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var textAlignment: UIKit.NSTextAlignment {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override weak dynamic open var delegate: UIKit.UITextViewDelegate? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
}
public protocol AuthenticationCredential {
  var requiresRefresh: Swift.Bool { get }
}
public protocol Authenticator : AnyObject {
  associatedtype Credential : prism_ios_native_sdk.AuthenticationCredential
  func apply(_ credential: Self.Credential, to urlRequest: inout Foundation.URLRequest)
  func refresh(_ credential: Self.Credential, for session: prism_ios_native_sdk.Session, completion: @escaping (Swift.Result<Self.Credential, Swift.Error>) -> Swift.Void)
  func didRequest(_ urlRequest: Foundation.URLRequest, with response: Foundation.HTTPURLResponse, failDueToAuthenticationError error: Swift.Error) -> Swift.Bool
  func isRequest(_ urlRequest: Foundation.URLRequest, authenticatedWith credential: Self.Credential) -> Swift.Bool
}
public enum AuthenticationError : Swift.Error {
  case missingCredential
  case excessiveRefresh
  public static func == (a: prism_ios_native_sdk.AuthenticationError, b: prism_ios_native_sdk.AuthenticationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class AuthenticationInterceptor<AuthenticatorType> : prism_ios_native_sdk.RequestInterceptor where AuthenticatorType : prism_ios_native_sdk.Authenticator {
  public typealias Credential = AuthenticatorType.Credential
  public struct RefreshWindow {
    public let interval: Foundation.TimeInterval
    public let maximumAttempts: Swift.Int
    public init(interval: Foundation.TimeInterval = 30.0, maximumAttempts: Swift.Int = 5)
  }
  public var credential: prism_ios_native_sdk.AuthenticationInterceptor<AuthenticatorType>.Credential? {
    get
    set
  }
  public init(authenticator: AuthenticatorType, credential: prism_ios_native_sdk.AuthenticationInterceptor<AuthenticatorType>.Credential? = nil, refreshWindow: prism_ios_native_sdk.AuthenticationInterceptor<AuthenticatorType>.RefreshWindow? = RefreshWindow())
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: prism_ios_native_sdk.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  public func retry(_ request: prism_ios_native_sdk.Request, for session: prism_ios_native_sdk.Session, dueTo error: Swift.Error, completion: @escaping (prism_ios_native_sdk.RetryResult) -> Swift.Void)
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
public let kIQUseDefaultKeyboardDistance: CoreGraphics.CGFloat
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var keyboardDistanceFromTextField: CoreGraphics.CGFloat {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var ignoreSwitchingByNextPrevious: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var enableMode: prism_ios_native_sdk.IQEnableMode {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldResignOnTouchOutsideMode: prism_ios_native_sdk.IQEnableMode {
    @objc get
    @objc set(newValue)
  }
}
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQKeyboardManager {
  @objc final public func reloadInputViews()
}
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQKeyboardManager {
  @objc final public var canGoPrevious: Swift.Bool {
    @objc get
  }
  @objc final public var canGoNext: Swift.Bool {
    @objc get
  }
  @discardableResult
  @objc final public func goPrevious() -> Swift.Bool
  @discardableResult
  @objc final public func goNext() -> Swift.Bool
}
open class Session {
  public static let `default`: prism_ios_native_sdk.Session
  final public let session: Foundation.URLSession
  final public let delegate: prism_ios_native_sdk.SessionDelegate
  final public let rootQueue: Dispatch.DispatchQueue
  final public let startRequestsImmediately: Swift.Bool
  final public let requestQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let interceptor: prism_ios_native_sdk.RequestInterceptor?
  final public let serverTrustManager: prism_ios_native_sdk.ServerTrustManager?
  final public let redirectHandler: prism_ios_native_sdk.RedirectHandler?
  final public let cachedResponseHandler: prism_ios_native_sdk.CachedResponseHandler?
  final public let eventMonitor: prism_ios_native_sdk.CompositeEventMonitor
  final public let defaultEventMonitors: [prism_ios_native_sdk.EventMonitor]
  public init(session: Foundation.URLSession, delegate: prism_ios_native_sdk.SessionDelegate, rootQueue: Dispatch.DispatchQueue, startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, serverTrustManager: prism_ios_native_sdk.ServerTrustManager? = nil, redirectHandler: prism_ios_native_sdk.RedirectHandler? = nil, cachedResponseHandler: prism_ios_native_sdk.CachedResponseHandler? = nil, eventMonitors: [prism_ios_native_sdk.EventMonitor] = [])
  convenience public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.af.default, delegate: prism_ios_native_sdk.SessionDelegate = SessionDelegate(), rootQueue: Dispatch.DispatchQueue = DispatchQueue(label: "org.alamofire.session.rootQueue"), startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, serverTrustManager: prism_ios_native_sdk.ServerTrustManager? = nil, redirectHandler: prism_ios_native_sdk.RedirectHandler? = nil, cachedResponseHandler: prism_ios_native_sdk.CachedResponseHandler? = nil, eventMonitors: [prism_ios_native_sdk.EventMonitor] = [])
  @objc deinit
  public func withAllRequests(perform action: @escaping (Swift.Set<prism_ios_native_sdk.Request>) -> Swift.Void)
  public func cancelAllRequests(completingOnQueue queue: Dispatch.DispatchQueue = .main, completion: (() -> Swift.Void)? = nil)
  public typealias RequestModifier = (inout Foundation.URLRequest) throws -> Swift.Void
  open func request(_ convertible: prism_ios_native_sdk.URLConvertible, method: prism_ios_native_sdk.HTTPMethod = .get, parameters: prism_ios_native_sdk.Parameters? = nil, encoding: prism_ios_native_sdk.ParameterEncoding = URLEncoding.default, headers: prism_ios_native_sdk.HTTPHeaders? = nil, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, requestModifier: prism_ios_native_sdk.Session.RequestModifier? = nil) -> prism_ios_native_sdk.DataRequest
  open func request<Parameters>(_ convertible: prism_ios_native_sdk.URLConvertible, method: prism_ios_native_sdk.HTTPMethod = .get, parameters: Parameters? = nil, encoder: prism_ios_native_sdk.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: prism_ios_native_sdk.HTTPHeaders? = nil, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, requestModifier: prism_ios_native_sdk.Session.RequestModifier? = nil) -> prism_ios_native_sdk.DataRequest where Parameters : Swift.Encodable
  open func request(_ convertible: prism_ios_native_sdk.URLRequestConvertible, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil) -> prism_ios_native_sdk.DataRequest
  open func streamRequest<Parameters>(_ convertible: prism_ios_native_sdk.URLConvertible, method: prism_ios_native_sdk.HTTPMethod = .get, parameters: Parameters? = nil, encoder: prism_ios_native_sdk.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: prism_ios_native_sdk.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, requestModifier: prism_ios_native_sdk.Session.RequestModifier? = nil) -> prism_ios_native_sdk.DataStreamRequest where Parameters : Swift.Encodable
  open func streamRequest(_ convertible: prism_ios_native_sdk.URLConvertible, method: prism_ios_native_sdk.HTTPMethod = .get, headers: prism_ios_native_sdk.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, requestModifier: prism_ios_native_sdk.Session.RequestModifier? = nil) -> prism_ios_native_sdk.DataStreamRequest
  open func streamRequest(_ convertible: prism_ios_native_sdk.URLRequestConvertible, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil) -> prism_ios_native_sdk.DataStreamRequest
  open func download(_ convertible: prism_ios_native_sdk.URLConvertible, method: prism_ios_native_sdk.HTTPMethod = .get, parameters: prism_ios_native_sdk.Parameters? = nil, encoding: prism_ios_native_sdk.ParameterEncoding = URLEncoding.default, headers: prism_ios_native_sdk.HTTPHeaders? = nil, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, requestModifier: prism_ios_native_sdk.Session.RequestModifier? = nil, to destination: prism_ios_native_sdk.DownloadRequest.Destination? = nil) -> prism_ios_native_sdk.DownloadRequest
  open func download<Parameters>(_ convertible: prism_ios_native_sdk.URLConvertible, method: prism_ios_native_sdk.HTTPMethod = .get, parameters: Parameters? = nil, encoder: prism_ios_native_sdk.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: prism_ios_native_sdk.HTTPHeaders? = nil, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, requestModifier: prism_ios_native_sdk.Session.RequestModifier? = nil, to destination: prism_ios_native_sdk.DownloadRequest.Destination? = nil) -> prism_ios_native_sdk.DownloadRequest where Parameters : Swift.Encodable
  open func download(_ convertible: prism_ios_native_sdk.URLRequestConvertible, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, to destination: prism_ios_native_sdk.DownloadRequest.Destination? = nil) -> prism_ios_native_sdk.DownloadRequest
  open func download(resumingWith data: Foundation.Data, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, to destination: prism_ios_native_sdk.DownloadRequest.Destination? = nil) -> prism_ios_native_sdk.DownloadRequest
  open func upload(_ data: Foundation.Data, to convertible: prism_ios_native_sdk.URLConvertible, method: prism_ios_native_sdk.HTTPMethod = .post, headers: prism_ios_native_sdk.HTTPHeaders? = nil, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: prism_ios_native_sdk.Session.RequestModifier? = nil) -> prism_ios_native_sdk.UploadRequest
  open func upload(_ data: Foundation.Data, with convertible: prism_ios_native_sdk.URLRequestConvertible, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> prism_ios_native_sdk.UploadRequest
  open func upload(_ fileURL: Foundation.URL, to convertible: prism_ios_native_sdk.URLConvertible, method: prism_ios_native_sdk.HTTPMethod = .post, headers: prism_ios_native_sdk.HTTPHeaders? = nil, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: prism_ios_native_sdk.Session.RequestModifier? = nil) -> prism_ios_native_sdk.UploadRequest
  open func upload(_ fileURL: Foundation.URL, with convertible: prism_ios_native_sdk.URLRequestConvertible, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> prism_ios_native_sdk.UploadRequest
  open func upload(_ stream: Foundation.InputStream, to convertible: prism_ios_native_sdk.URLConvertible, method: prism_ios_native_sdk.HTTPMethod = .post, headers: prism_ios_native_sdk.HTTPHeaders? = nil, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: prism_ios_native_sdk.Session.RequestModifier? = nil) -> prism_ios_native_sdk.UploadRequest
  open func upload(_ stream: Foundation.InputStream, with convertible: prism_ios_native_sdk.URLRequestConvertible, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> prism_ios_native_sdk.UploadRequest
  open func upload(multipartFormData: @escaping (prism_ios_native_sdk.MultipartFormData) -> Swift.Void, to url: prism_ios_native_sdk.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: prism_ios_native_sdk.HTTPMethod = .post, headers: prism_ios_native_sdk.HTTPHeaders? = nil, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: prism_ios_native_sdk.Session.RequestModifier? = nil) -> prism_ios_native_sdk.UploadRequest
  open func upload(multipartFormData: @escaping (prism_ios_native_sdk.MultipartFormData) -> Swift.Void, with request: prism_ios_native_sdk.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> prism_ios_native_sdk.UploadRequest
  open func upload(multipartFormData: prism_ios_native_sdk.MultipartFormData, to url: prism_ios_native_sdk.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: prism_ios_native_sdk.HTTPMethod = .post, headers: prism_ios_native_sdk.HTTPHeaders? = nil, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default, requestModifier: prism_ios_native_sdk.Session.RequestModifier? = nil) -> prism_ios_native_sdk.UploadRequest
  open func upload(multipartFormData: prism_ios_native_sdk.MultipartFormData, with request: prism_ios_native_sdk.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: prism_ios_native_sdk.RequestInterceptor? = nil, fileManager: Foundation.FileManager = .default) -> prism_ios_native_sdk.UploadRequest
}
extension prism_ios_native_sdk.Session : prism_ios_native_sdk.RequestDelegate {
  public var sessionConfiguration: Foundation.URLSessionConfiguration {
    get
  }
  public var startImmediately: Swift.Bool {
    get
  }
  public func cleanup(after request: prism_ios_native_sdk.Request)
  public func retryResult(for request: prism_ios_native_sdk.Request, dueTo error: prism_ios_native_sdk.AFError, completion: @escaping (prism_ios_native_sdk.RetryResult) -> Swift.Void)
  public func retryRequest(_ request: prism_ios_native_sdk.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
public protocol ParameterEncoder {
  func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
}
open class JSONParameterEncoder : prism_ios_native_sdk.ParameterEncoder {
  public static var `default`: prism_ios_native_sdk.JSONParameterEncoder {
    get
  }
  public static var prettyPrinted: prism_ios_native_sdk.JSONParameterEncoder {
    get
  }
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  public static var sortedKeys: prism_ios_native_sdk.JSONParameterEncoder {
    get
  }
  final public let encoder: Foundation.JSONEncoder
  public init(encoder: Foundation.JSONEncoder = JSONEncoder())
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
extension prism_ios_native_sdk.ParameterEncoder where Self == prism_ios_native_sdk.JSONParameterEncoder {
  public static var json: prism_ios_native_sdk.JSONParameterEncoder {
    get
  }
  public static func json(encoder: Foundation.JSONEncoder = JSONEncoder()) -> prism_ios_native_sdk.JSONParameterEncoder
}
open class URLEncodedFormParameterEncoder : prism_ios_native_sdk.ParameterEncoder {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: prism_ios_native_sdk.URLEncodedFormParameterEncoder.Destination, b: prism_ios_native_sdk.URLEncodedFormParameterEncoder.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: prism_ios_native_sdk.URLEncodedFormParameterEncoder {
    get
  }
  final public let encoder: prism_ios_native_sdk.URLEncodedFormEncoder
  final public let destination: prism_ios_native_sdk.URLEncodedFormParameterEncoder.Destination
  public init(encoder: prism_ios_native_sdk.URLEncodedFormEncoder = URLEncodedFormEncoder(), destination: prism_ios_native_sdk.URLEncodedFormParameterEncoder.Destination = .methodDependent)
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
extension prism_ios_native_sdk.ParameterEncoder where Self == prism_ios_native_sdk.URLEncodedFormParameterEncoder {
  public static var urlEncodedForm: prism_ios_native_sdk.URLEncodedFormParameterEncoder {
    get
  }
  public static func urlEncodedForm(encoder: prism_ios_native_sdk.URLEncodedFormEncoder = URLEncodedFormEncoder(), destination: prism_ios_native_sdk.URLEncodedFormParameterEncoder.Destination = .methodDependent) -> prism_ios_native_sdk.URLEncodedFormParameterEncoder
}
extension Foundation.URLRequest {
  public var method: prism_ios_native_sdk.HTTPMethod? {
    get
    set
  }
  public func validate() throws
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func parentIQContainerViewController() -> UIKit.UIViewController?
  @objc @available(*, deprecated, message: "Due to change in core-logic of handling distance between textField and keyboard distance, this layout contraint tweak is no longer needed and things will just work out of the box regardless of constraint pinned with safeArea/layoutGuide/superview.")
  @IBOutlet @_Concurrency.MainActor(unsafe) dynamic public var IQLayoutGuideConstraint: UIKit.NSLayoutConstraint? {
    @objc get
    @objc set(newValue)
  }
}
public enum AFError : Swift.Error {
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: Swift.Error)
    case inputStreamReadFailed(error: Swift.Error)
  }
  public struct UnexpectedInputStreamLength : Swift.Error {
    public var bytesExpected: Swift.UInt64
    public var bytesRead: Swift.UInt64
  }
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: Swift.Error)
    case customEncodingFailed(error: Swift.Error)
  }
  public enum ParameterEncoderFailureReason {
    public enum RequiredComponent {
      case url
      case httpMethod(rawValue: Swift.String)
    }
    case missingRequiredComponent(prism_ios_native_sdk.AFError.ParameterEncoderFailureReason.RequiredComponent)
    case encoderFailed(error: Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
    case customValidationFailed(error: Swift.Error)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: Swift.Error)
    case decodingFailed(error: Swift.Error)
    case customSerializationFailed(error: Swift.Error)
    case invalidEmptyResponse(type: Swift.String)
  }
  public enum ServerTrustFailureReason {
    public struct Output {
      public let host: Swift.String
      public let trust: Security.SecTrust
      public let status: Darwin.OSStatus
      public let result: Security.SecTrustResultType
    }
    case noRequiredEvaluator(host: Swift.String)
    case noCertificatesFound
    case noPublicKeysFound
    case policyApplicationFailed(trust: Security.SecTrust, policy: Security.SecPolicy, status: Darwin.OSStatus)
    case settingAnchorCertificatesFailed(status: Darwin.OSStatus, certificates: [Security.SecCertificate])
    case revocationPolicyCreationFailed
    case trustEvaluationFailed(error: Swift.Error?)
    case defaultEvaluationFailed(output: prism_ios_native_sdk.AFError.ServerTrustFailureReason.Output)
    case hostValidationFailed(output: prism_ios_native_sdk.AFError.ServerTrustFailureReason.Output)
    case revocationCheckFailed(output: prism_ios_native_sdk.AFError.ServerTrustFailureReason.Output, options: prism_ios_native_sdk.RevocationTrustEvaluator.Options)
    case certificatePinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedCertificates: [Security.SecCertificate], serverCertificates: [Security.SecCertificate])
    case publicKeyPinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedKeys: [Security.SecKey], serverKeys: [Security.SecKey])
    case customEvaluationFailed(error: Swift.Error)
  }
  public enum URLRequestValidationFailureReason {
    case bodyDataInGETRequest(Foundation.Data)
  }
  case createUploadableFailed(error: Swift.Error)
  case createURLRequestFailed(error: Swift.Error)
  case downloadedFileMoveFailed(error: Swift.Error, source: Foundation.URL, destination: Foundation.URL)
  case explicitlyCancelled
  case invalidURL(url: prism_ios_native_sdk.URLConvertible)
  case multipartEncodingFailed(reason: prism_ios_native_sdk.AFError.MultipartEncodingFailureReason)
  case parameterEncodingFailed(reason: prism_ios_native_sdk.AFError.ParameterEncodingFailureReason)
  case parameterEncoderFailed(reason: prism_ios_native_sdk.AFError.ParameterEncoderFailureReason)
  case requestAdaptationFailed(error: Swift.Error)
  case requestRetryFailed(retryError: Swift.Error, originalError: Swift.Error)
  case responseValidationFailed(reason: prism_ios_native_sdk.AFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: prism_ios_native_sdk.AFError.ResponseSerializationFailureReason)
  case serverTrustEvaluationFailed(reason: prism_ios_native_sdk.AFError.ServerTrustFailureReason)
  case sessionDeinitialized
  case sessionInvalidated(error: Swift.Error?)
  case sessionTaskFailed(error: Swift.Error)
  case urlRequestValidationFailed(reason: prism_ios_native_sdk.AFError.URLRequestValidationFailureReason)
}
extension Swift.Error {
  public var asAFError: prism_ios_native_sdk.AFError? {
    get
  }
  public func asAFError(orFailWith message: @autoclosure () -> Swift.String, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> prism_ios_native_sdk.AFError
}
extension prism_ios_native_sdk.AFError {
  public var isSessionDeinitializedError: Swift.Bool {
    get
  }
  public var isSessionInvalidatedError: Swift.Bool {
    get
  }
  public var isExplicitlyCancelledError: Swift.Bool {
    get
  }
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isParameterEncoderError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isRequestAdaptationError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
  public var isServerTrustEvaluationError: Swift.Bool {
    get
  }
  public var isRequestRetryError: Swift.Bool {
    get
  }
  public var isCreateUploadableError: Swift.Bool {
    get
  }
  public var isCreateURLRequestError: Swift.Bool {
    get
  }
  public var isDownloadedFileMoveError: Swift.Bool {
    get
  }
  public var isSessionTaskError: Swift.Bool {
    get
  }
}
extension prism_ios_native_sdk.AFError {
  public var urlConvertible: prism_ios_native_sdk.URLConvertible? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: Swift.Error? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
  public var sourceURL: Foundation.URL? {
    get
  }
  public var destinationURL: Foundation.URL? {
    get
  }
  public var downloadResumeData: Foundation.Data? {
    get
  }
}
extension prism_ios_native_sdk.AFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension prism_ios_native_sdk.Request {
  
  #if compiler(>=5.3) && $RethrowsProtocol
  public func uploadProgress(bufferingPolicy: prism_ios_native_sdk.StreamOf<Foundation.Progress>.BufferingPolicy = .unbounded) -> prism_ios_native_sdk.StreamOf<Foundation.Progress>
  #endif

  
  #if compiler(>=5.3) && $RethrowsProtocol
  public func downloadProgress(bufferingPolicy: prism_ios_native_sdk.StreamOf<Foundation.Progress>.BufferingPolicy = .unbounded) -> prism_ios_native_sdk.StreamOf<Foundation.Progress>
  #endif

  
  #if compiler(>=5.3) && $RethrowsProtocol
  public func urlRequests(bufferingPolicy: prism_ios_native_sdk.StreamOf<Foundation.URLRequest>.BufferingPolicy = .unbounded) -> prism_ios_native_sdk.StreamOf<Foundation.URLRequest>
  #endif

  
  #if compiler(>=5.3) && $RethrowsProtocol
  public func urlSessionTasks(bufferingPolicy: prism_ios_native_sdk.StreamOf<Foundation.URLSessionTask>.BufferingPolicy = .unbounded) -> prism_ios_native_sdk.StreamOf<Foundation.URLSessionTask>
  #endif

  
  #if compiler(>=5.3) && $RethrowsProtocol
  public func cURLDescriptions(bufferingPolicy: prism_ios_native_sdk.StreamOf<Swift.String>.BufferingPolicy = .unbounded) -> prism_ios_native_sdk.StreamOf<Swift.String>
  #endif

}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DataTask<Value> {
  
  #if compiler(>=5.3) && $EffectfulProp
  public var response: prism_ios_native_sdk.DataResponse<Value, prism_ios_native_sdk.AFError> {
    get async
  }
  #endif

  
  #if compiler(>=5.3) && $EffectfulProp
  public var result: Swift.Result<Value, prism_ios_native_sdk.AFError> {
    get async
  }
  #endif

  
  #if compiler(>=5.3) && $EffectfulProp
  public var value: Value {
    get async throws
  }
  #endif

  public func cancel()
  public func resume()
  public func suspend()
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension prism_ios_native_sdk.DataRequest {
  public func serializingData(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false, dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> prism_ios_native_sdk.DataTask<Foundation.Data>
  public func serializingDecodable<Value>(_ type: Value.Type = Value.self, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false, dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = DecodableResponseSerializer<Value>.defaultDataPreprocessor, decoder: prism_ios_native_sdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<Value>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DecodableResponseSerializer<Value>.defaultEmptyRequestMethods) -> prism_ios_native_sdk.DataTask<Value> where Value : Swift.Decodable
  public func serializingString(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false, dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> prism_ios_native_sdk.DataTask<Swift.String>
  public func serializingResponse<Serializer>(using serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false) -> prism_ios_native_sdk.DataTask<Serializer.SerializedObject> where Serializer : prism_ios_native_sdk.ResponseSerializer
  public func serializingResponse<Serializer>(using serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false) -> prism_ios_native_sdk.DataTask<Serializer.SerializedObject> where Serializer : prism_ios_native_sdk.DataResponseSerializerProtocol
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DownloadTask<Value> {
  
  #if compiler(>=5.3) && $EffectfulProp
  public var response: prism_ios_native_sdk.DownloadResponse<Value, prism_ios_native_sdk.AFError> {
    get async
  }
  #endif

  
  #if compiler(>=5.3) && $EffectfulProp
  public var result: Swift.Result<Value, prism_ios_native_sdk.AFError> {
    get async
  }
  #endif

  
  #if compiler(>=5.3) && $EffectfulProp
  public var value: Value {
    get async throws
  }
  #endif

  public func cancel()
  public func resume()
  public func suspend()
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension prism_ios_native_sdk.DownloadRequest {
  public func serializingData(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false, dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> prism_ios_native_sdk.DownloadTask<Foundation.Data>
  public func serializingDecodable<Value>(_ type: Value.Type = Value.self, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false, dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = DecodableResponseSerializer<Value>.defaultDataPreprocessor, decoder: prism_ios_native_sdk.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<Value>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = DecodableResponseSerializer<Value>.defaultEmptyRequestMethods) -> prism_ios_native_sdk.DownloadTask<Value> where Value : Swift.Decodable
  public func serializingDownloadedFileURL(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false) -> prism_ios_native_sdk.DownloadTask<Foundation.URL>
  public func serializingString(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false, dataPreprocessor: prism_ios_native_sdk.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<prism_ios_native_sdk.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> prism_ios_native_sdk.DownloadTask<Swift.String>
  public func serializingDownload<Serializer>(using serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false) -> prism_ios_native_sdk.DownloadTask<Serializer.SerializedObject> where Serializer : prism_ios_native_sdk.ResponseSerializer
  public func serializingDownload<Serializer>(using serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = false) -> prism_ios_native_sdk.DownloadTask<Serializer.SerializedObject> where Serializer : prism_ios_native_sdk.DownloadResponseSerializerProtocol
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DataStreamTask {
  
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias Stream<Success, Failure> = prism_ios_native_sdk.StreamOf<prism_ios_native_sdk.DataStreamRequest.Stream<Success, Failure>> where Failure : Swift.Error
  #endif

  
  #if compiler(>=5.3) && $RethrowsProtocol
  public func streamingData(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, bufferingPolicy: prism_ios_native_sdk.DataStreamTask.Stream<Foundation.Data, Swift.Never>.BufferingPolicy = .unbounded) -> prism_ios_native_sdk.DataStreamTask.Stream<Foundation.Data, Swift.Never>
  #endif

  
  #if compiler(>=5.3) && $RethrowsProtocol
  public func streamingStrings(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, bufferingPolicy: prism_ios_native_sdk.DataStreamTask.Stream<Swift.String, Swift.Never>.BufferingPolicy = .unbounded) -> prism_ios_native_sdk.DataStreamTask.Stream<Swift.String, Swift.Never>
  #endif

  
  #if compiler(>=5.3) && $RethrowsProtocol
  public func streamingDecodables<T>(_ type: T.Type = T.self, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, bufferingPolicy: prism_ios_native_sdk.DataStreamTask.Stream<T, prism_ios_native_sdk.AFError>.BufferingPolicy = .unbounded) -> prism_ios_native_sdk.DataStreamTask.Stream<T, prism_ios_native_sdk.AFError> where T : Swift.Decodable
  #endif

  
  #if compiler(>=5.3) && $RethrowsProtocol
  public func streamingResponses<Serializer>(serializedUsing serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, bufferingPolicy: prism_ios_native_sdk.DataStreamTask.Stream<Serializer.SerializedObject, prism_ios_native_sdk.AFError>.BufferingPolicy = .unbounded) -> prism_ios_native_sdk.DataStreamTask.Stream<Serializer.SerializedObject, prism_ios_native_sdk.AFError> where Serializer : prism_ios_native_sdk.DataStreamSerializer
  #endif

  public func cancel()
  public func resume()
  public func suspend()
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension prism_ios_native_sdk.DataStreamRequest {
  final public func streamTask() -> prism_ios_native_sdk.DataStreamTask
}

#if compiler(>=5.3) && $RethrowsProtocol
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct StreamOf<Element> : _Concurrency.AsyncSequence {
  public typealias AsyncIterator = prism_ios_native_sdk.StreamOf<Element>.Iterator
  public typealias BufferingPolicy = _Concurrency.AsyncStream<Element>.Continuation.BufferingPolicy
  public func makeAsyncIterator() -> prism_ios_native_sdk.StreamOf<Element>.Iterator
  public struct Iterator : _Concurrency.AsyncIteratorProtocol {
    
    #if compiler(>=5.3) && $AsyncAwait
    public mutating func next() async -> Element?
    #endif

  }
}
#endif

public struct HTTPMethod : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
  public static let connect: prism_ios_native_sdk.HTTPMethod
  public static let delete: prism_ios_native_sdk.HTTPMethod
  public static let get: prism_ios_native_sdk.HTTPMethod
  public static let head: prism_ios_native_sdk.HTTPMethod
  public static let options: prism_ios_native_sdk.HTTPMethod
  public static let patch: prism_ios_native_sdk.HTTPMethod
  public static let post: prism_ios_native_sdk.HTTPMethod
  public static let put: prism_ios_native_sdk.HTTPMethod
  public static let query: prism_ios_native_sdk.HTTPMethod
  public static let trace: prism_ios_native_sdk.HTTPMethod
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
public struct AlamofireExtension<ExtendedType> {
  public var type: ExtendedType {
    get
  }
  public init(_ type: ExtendedType)
}
public protocol AlamofireExtended {
  associatedtype ExtendedType
  static var af: prism_ios_native_sdk.AlamofireExtension<Self.ExtendedType>.Type { get set }
  var af: prism_ios_native_sdk.AlamofireExtension<Self.ExtendedType> { get set }
}
extension prism_ios_native_sdk.AlamofireExtended {
  public static var af: prism_ios_native_sdk.AlamofireExtension<Self>.Type {
    get
    set
  }
  public var af: prism_ios_native_sdk.AlamofireExtension<Self> {
    get
    set
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PrismEntryPoint : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var delegate: UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) public var prismEntryDelegate: prism_ios_native_sdk.PrismEntryPointDelegate?
  @_Concurrency.MainActor(unsafe) required public init(merchantId: Swift.String, userId: Swift.String, successRedirectURL: Swift.String, failureRedirectURL: Swift.String, runOnProduction: prism_ios_native_sdk.Mode, refVC: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) public func addConfig(config: [prism_ios_native_sdk.Config])
  @_Concurrency.MainActor(unsafe) public func beginKYCFLow()
  @objc deinit
}
extension prism_ios_native_sdk.PrismEntryPoint : UIKit.UIAdaptivePresentationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
}
public enum Mode {
  case sandbox
  case production
  case stage
  public static func == (a: prism_ios_native_sdk.Mode, b: prism_ios_native_sdk.Mode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Config : Swift.String {
  case residentUidaiAadhaarFlow
  case myAadhaarUidaiFlow
  case digilockerFlow
  case aadhaarApiflow
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PriorityCall {
}
public struct ClientAadhaarData {
}
public protocol PrismEntryPointDelegate : ObjectiveC.NSObject {
  func onKYCFinished(data: [Swift.String : Any]?)
}
public class DigestMethod {
  public var algorithm: Swift.String?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [prism_ios_native_sdk.DigestMethod]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc deinit
}
public class Transforms {
  public var transform: prism_ios_native_sdk.Transform?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [prism_ios_native_sdk.Transforms]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc deinit
}
public class OfflinePaperlessKyc {
  public var referenceId: Swift.String?
  public var uidData: prism_ios_native_sdk.UidData?
  public var signature: prism_ios_native_sdk.Signature?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [prism_ios_native_sdk.OfflinePaperlessKyc]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc deinit
}
public class UidData {
  public var poi: prism_ios_native_sdk.Poi?
  public var poa: prism_ios_native_sdk.Poa?
  public var pht: Swift.String?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [prism_ios_native_sdk.UidData]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc deinit
}
public class Poa {
  public var street: Swift.String?
  public var loc: Swift.String?
  public var po: Swift.String?
  public var dist: Swift.String?
  public var vtc: Swift.String?
  public var house: Swift.String?
  public var country: Swift.String?
  public var subdist: Swift.String?
  public var pc: Swift.String?
  public var landmark: Swift.String?
  public var careof: Swift.String?
  public var state: Swift.String?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [prism_ios_native_sdk.Poa]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc deinit
}
public class Poi {
  public var name: Swift.String?
  public var gender: Swift.String?
  public var m: Swift.String?
  public var e: Swift.String?
  public var dob: Swift.String?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [prism_ios_native_sdk.Poi]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc deinit
}
public class Json4Swift_Base {
  public var offlinePaperlessKyc: prism_ios_native_sdk.OfflinePaperlessKyc?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [prism_ios_native_sdk.Json4Swift_Base]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc deinit
}
public class Signature {
  public var xmlns: Swift.String?
  public var signedInfo: prism_ios_native_sdk.SignedInfo?
  public var signatureValue: Swift.String?
  public var keyInfo: prism_ios_native_sdk.KeyInfo?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [prism_ios_native_sdk.Signature]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc deinit
}
public class CanonicalizationMethod {
  public var algorithm: Swift.String?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [prism_ios_native_sdk.CanonicalizationMethod]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc deinit
}
public class X509Data {
  public var x509SubjectName: Swift.String?
  public var x509Certificate: Swift.String?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [prism_ios_native_sdk.X509Data]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc deinit
}
public class Reference {
  public var uRI: Swift.String?
  public var transforms: prism_ios_native_sdk.Transforms?
  public var digestMethod: prism_ios_native_sdk.DigestMethod?
  public var digestValue: Swift.String?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [prism_ios_native_sdk.Reference]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc deinit
}
public class SignedInfo {
  public var canonicalizationMethod: prism_ios_native_sdk.CanonicalizationMethod?
  public var signatureMethod: prism_ios_native_sdk.SignatureMethod?
  public var reference: prism_ios_native_sdk.Reference?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [prism_ios_native_sdk.SignedInfo]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc deinit
}
public class SignatureMethod {
  public var algorithm: Swift.String?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [prism_ios_native_sdk.SignatureMethod]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc deinit
}
public class KeyInfo {
  public var x509Data: prism_ios_native_sdk.X509Data?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [prism_ios_native_sdk.KeyInfo]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc deinit
}
public class Transform {
  public var algorithm: Swift.String?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [prism_ios_native_sdk.Transform]
  required public init?(dictionary: Foundation.NSDictionary)
  public func dictionaryRepresentation() -> Foundation.NSDictionary
  @objc deinit
}
public typealias AFResult<Success> = Swift.Result<Success, prism_ios_native_sdk.AFError>
public let AF: prism_ios_native_sdk.Session
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQKeyboardManager {
  @objc final public var movedDistance: CoreGraphics.CGFloat {
    @objc get
  }
  @objc final public var movedDistanceChanged: ((CoreGraphics.CGFloat) -> Swift.Void)? {
    @objc get
    @objc set(newValue)
  }
}
extension prism_ios_native_sdk.URLEncodedFormEncoder.ArrayEncoding : Swift.Equatable {}
extension prism_ios_native_sdk.URLEncodedFormEncoder.ArrayEncoding : Swift.Hashable {}
extension prism_ios_native_sdk.URLEncodedFormEncoder.BoolEncoding : Swift.Equatable {}
extension prism_ios_native_sdk.URLEncodedFormEncoder.BoolEncoding : Swift.Hashable {}
extension prism_ios_native_sdk.URLEncodedFormEncoder.SpaceEncoding : Swift.Equatable {}
extension prism_ios_native_sdk.URLEncodedFormEncoder.SpaceEncoding : Swift.Hashable {}
extension prism_ios_native_sdk.URLEncoding.Destination : Swift.Equatable {}
extension prism_ios_native_sdk.URLEncoding.Destination : Swift.Hashable {}
extension prism_ios_native_sdk.URLEncoding.ArrayEncoding : Swift.Equatable {}
extension prism_ios_native_sdk.URLEncoding.ArrayEncoding : Swift.Hashable {}
extension prism_ios_native_sdk.URLEncoding.BoolEncoding : Swift.Equatable {}
extension prism_ios_native_sdk.URLEncoding.BoolEncoding : Swift.Hashable {}
extension prism_ios_native_sdk.ToastPosition : Swift.Equatable {}
extension prism_ios_native_sdk.ToastPosition : Swift.Hashable {}
@available(*, unavailable, renamed: "Connection")
extension prism_ios_native_sdk.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension prism_ios_native_sdk.Reachability.NetworkStatus : Swift.Hashable {}
extension prism_ios_native_sdk.Reachability.Connection : Swift.Equatable {}
extension prism_ios_native_sdk.Reachability.Connection : Swift.Hashable {}
extension prism_ios_native_sdk.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Equatable {}
extension prism_ios_native_sdk.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQAutoToolbarManageBehaviour : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQAutoToolbarManageBehaviour : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQAutoToolbarManageBehaviour : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQPreviousNextDisplayMode : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQPreviousNextDisplayMode : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQPreviousNextDisplayMode : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQEnableMode : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQEnableMode : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension prism_ios_native_sdk.IQEnableMode : Swift.RawRepresentable {}
extension prism_ios_native_sdk.Request.State : Swift.Equatable {}
extension prism_ios_native_sdk.Request.State : Swift.Hashable {}
extension prism_ios_native_sdk.AuthenticationError : Swift.Equatable {}
extension prism_ios_native_sdk.AuthenticationError : Swift.Hashable {}
extension prism_ios_native_sdk.URLEncodedFormParameterEncoder.Destination : Swift.Equatable {}
extension prism_ios_native_sdk.URLEncodedFormParameterEncoder.Destination : Swift.Hashable {}
extension prism_ios_native_sdk.Mode : Swift.Equatable {}
extension prism_ios_native_sdk.Mode : Swift.Hashable {}
extension prism_ios_native_sdk.Config : Swift.Equatable {}
extension prism_ios_native_sdk.Config : Swift.Hashable {}
extension prism_ios_native_sdk.Config : Swift.RawRepresentable {}
